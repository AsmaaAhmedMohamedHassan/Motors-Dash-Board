
motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f22  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00002f22  00002fb6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000fc  008000fc  00003052  2**0
                  ALLOC
  3 .stab         00002790  00000000  00000000  00003054  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d4a  00000000  00000000  000057e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000652e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000668e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000681d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008862  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009963  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a8e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000aa68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000ad2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b5b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e2       	ldi	r30, 0x22	; 34
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <main>
      8a:	0c 94 8f 17 	jmp	0x2f1e	; 0x2f1e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 ed       	ldi	r26, 0xD6	; 214
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 17 	jmp	0x2eb0	; 0x2eb0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 ed       	ldi	r24, 0xD6	; 214
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 17 	jmp	0x2ee8	; 0x2ee8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 17 	jmp	0x2ec0	; 0x2ec0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	66 ed       	ldi	r22, 0xD6	; 214
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7c 17 	jmp	0x2ef8	; 0x2ef8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 64 17 	jmp	0x2ec8	; 0x2ec8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 68 17 	jmp	0x2ed0	; 0x2ed0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 84 17 	jmp	0x2f08	; 0x2f08 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_voidInit>:
#include "DIO_private.h"
#include "DIO_config.h"


void DIO_voidInit(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/*SET PIN DIRECTIONS*/

	DIO_U8_DDRA_REG = conc(DIO_U8_PA7_DIRECTION,DIO_U8_PA6_DIRECTION,DIO_U8_PA5_DIRECTION,DIO_U8_PA4_DIRECTION,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8e e7       	ldi	r24, 0x7E	; 126
     cac:	80 83       	st	Z, r24
	                       DIO_U8_PA3_DIRECTION,DIO_U8_PA2_DIRECTION,DIO_U8_PA1_DIRECTION,DIO_U8_PA0_DIRECTION);

	DIO_U8_DDRB_REG = conc(DIO_U8_PB7_DIRECTION,DIO_U8_PB6_DIRECTION,DIO_U8_PB5_DIRECTION,DIO_U8_PB4_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	80 ef       	ldi	r24, 0xF0	; 240
     cb4:	80 83       	st	Z, r24
	                       DIO_U8_PB3_DIRECTION,DIO_U8_PB2_DIRECTION,DIO_U8_PB1_DIRECTION,DIO_U8_PB0_DIRECTION);

	DIO_U8_DDRC_REG = conc(DIO_U8_PC7_DIRECTION,DIO_U8_PC6_DIRECTION,DIO_U8_PC5_DIRECTION,DIO_U8_PC4_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	80 83       	st	Z, r24
	                       DIO_U8_PC3_DIRECTION,DIO_U8_PC2_DIRECTION,DIO_U8_PC1_DIRECTION,DIO_U8_PC0_DIRECTION);
						   
	DIO_U8_DDRD_REG = conc(DIO_U8_PD7_DIRECTION,DIO_U8_PD6_DIRECTION,DIO_U8_PD5_DIRECTION,DIO_U8_PD4_DIRECTION,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	10 82       	st	Z, r1
	                       DIO_U8_PD3_DIRECTION,DIO_U8_PD2_DIRECTION,DIO_U8_PD1_DIRECTION,DIO_U8_PD0_DIRECTION);
	/*SET INITIAL VALUES FOR PINS*/   
	DIO_U8_PORTA_REG = conc(DIO_U8_PA7_INITIAL_VALUE,DIO_U8_PA6_INITIAL_VALUE,DIO_U8_PA5_INITIAL_VALUE,DIO_U8_PA4_INITIAL_VALUE,
     cc4:	eb e3       	ldi	r30, 0x3B	; 59
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	10 82       	st	Z, r1
	                       DIO_U8_PA3_INITIAL_VALUE,DIO_U8_PA2_INITIAL_VALUE,DIO_U8_PA1_INITIAL_VALUE,DIO_U8_PA0_INITIAL_VALUE);
                                                                                                                 
	DIO_U8_PORTB_REG = conc(DIO_U8_PB7_INITIAL_VALUE,DIO_U8_PB6_INITIAL_VALUE,DIO_U8_PB5_INITIAL_VALUE,DIO_U8_PB4_INITIAL_VALUE,
     cca:	e8 e3       	ldi	r30, 0x38	; 56
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 ef       	ldi	r24, 0xF0	; 240
     cd0:	80 83       	st	Z, r24
	                       DIO_U8_PB3_INITIAL_VALUE,DIO_U8_PB2_INITIAL_VALUE,DIO_U8_PB1_INITIAL_VALUE,DIO_U8_PB0_INITIAL_VALUE);
						                                                                                         
	DIO_U8_PORTC_REG = conc(DIO_U8_PC7_INITIAL_VALUE,DIO_U8_PC6_INITIAL_VALUE,DIO_U8_PC5_INITIAL_VALUE,DIO_U8_PC4_INITIAL_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	10 82       	st	Z, r1
	                       DIO_U8_PC3_INITIAL_VALUE,DIO_U8_PC2_INITIAL_VALUE,DIO_U8_PC1_INITIAL_VALUE,DIO_U8_PC0_INITIAL_VALUE);
						                                                                                         
	DIO_U8_PORTD_REG = conc(DIO_U8_PD7_INITIAL_VALUE,DIO_U8_PD6_INITIAL_VALUE,DIO_U8_PD5_INITIAL_VALUE,DIO_U8_PD4_INITIAL_VALUE,
     cd8:	e2 e3       	ldi	r30, 0x32	; 50
     cda:	f0 e0       	ldi	r31, 0x00	; 0
     cdc:	8c e3       	ldi	r24, 0x3C	; 60
     cde:	80 83       	st	Z, r24
	                       DIO_U8_PD3_INITIAL_VALUE,DIO_U8_PD2_INITIAL_VALUE,DIO_U8_PD1_INITIAL_VALUE,DIO_U8_PD0_INITIAL_VALUE);	
	
						   
						   
						   
}	
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:



u8   DIO_u8SetPinDirection (u8 copy_u8PortId, u8   copy_u8PinId ,u8  copy_u8PinDirection) 
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	00 d0       	rcall	.+0      	; 0xcec <DIO_u8SetPinDirection+0x6>
     cec:	00 d0       	rcall	.+0      	; 0xcee <DIO_u8SetPinDirection+0x8>
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <DIO_u8SetPinDirection+0xa>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	8a 83       	std	Y+2, r24	; 0x02
     cf6:	6b 83       	std	Y+3, r22	; 0x03
     cf8:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = STD_TYPES_OK ;
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId<=DIO_u8_PORTD)&&(copy_u8PinId <= DIO_u8_PIN7)
     cfe:	8a 81       	ldd	r24, Y+2	; 0x02
     d00:	84 30       	cpi	r24, 0x04	; 4
     d02:	08 f0       	brcs	.+2      	; 0xd06 <DIO_u8SetPinDirection+0x20>
     d04:	dd c0       	rjmp	.+442    	; 0xec0 <DIO_u8SetPinDirection+0x1da>
     d06:	8b 81       	ldd	r24, Y+3	; 0x03
     d08:	88 30       	cpi	r24, 0x08	; 8
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <DIO_u8SetPinDirection+0x28>
     d0c:	d9 c0       	rjmp	.+434    	; 0xec0 <DIO_u8SetPinDirection+0x1da>
     d0e:	8c 81       	ldd	r24, Y+4	; 0x04
     d10:	88 23       	and	r24, r24
     d12:	21 f0       	breq	.+8      	; 0xd1c <DIO_u8SetPinDirection+0x36>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	09 f0       	breq	.+2      	; 0xd1c <DIO_u8SetPinDirection+0x36>
     d1a:	d2 c0       	rjmp	.+420    	; 0xec0 <DIO_u8SetPinDirection+0x1da>
       &&((copy_u8PinDirection == DIO_u8_INPUT)||(copy_u8PinDirection ==DIO_u8_OUTPUT)))
	{
		switch(copy_u8PortId)
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	3e 83       	std	Y+6, r19	; 0x06
     d24:	2d 83       	std	Y+5, r18	; 0x05
     d26:	8d 81       	ldd	r24, Y+5	; 0x05
     d28:	9e 81       	ldd	r25, Y+6	; 0x06
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	91 05       	cpc	r25, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <DIO_u8SetPinDirection+0x4c>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <DIO_u8SetPinDirection+0xd2>
     d32:	2d 81       	ldd	r18, Y+5	; 0x05
     d34:	3e 81       	ldd	r19, Y+6	; 0x06
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	2c f4       	brge	.+10     	; 0xd46 <DIO_u8SetPinDirection+0x60>
     d3c:	8d 81       	ldd	r24, Y+5	; 0x05
     d3e:	9e 81       	ldd	r25, Y+6	; 0x06
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	71 f0       	breq	.+28     	; 0xd60 <DIO_u8SetPinDirection+0x7a>
     d44:	be c0       	rjmp	.+380    	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
     d46:	2d 81       	ldd	r18, Y+5	; 0x05
     d48:	3e 81       	ldd	r19, Y+6	; 0x06
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <DIO_u8SetPinDirection+0x6c>
     d50:	5f c0       	rjmp	.+190    	; 0xe10 <DIO_u8SetPinDirection+0x12a>
     d52:	8d 81       	ldd	r24, Y+5	; 0x05
     d54:	9e 81       	ldd	r25, Y+6	; 0x06
     d56:	83 30       	cpi	r24, 0x03	; 3
     d58:	91 05       	cpc	r25, r1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <DIO_u8SetPinDirection+0x78>
     d5c:	85 c0       	rjmp	.+266    	; 0xe68 <DIO_u8SetPinDirection+0x182>
     d5e:	b1 c0       	rjmp	.+354    	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
		{
		  case DIO_u8_PORTA :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	88 23       	and	r24, r24
     d64:	a9 f4       	brne	.+42     	; 0xd90 <DIO_u8SetPinDirection+0xaa>
			 {
				 CLR_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     d66:	aa e3       	ldi	r26, 0x3A	; 58
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ea e3       	ldi	r30, 0x3A	; 58
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <DIO_u8SetPinDirection+0x9e>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <DIO_u8SetPinDirection+0x9a>
     d88:	80 95       	com	r24
     d8a:	84 23       	and	r24, r20
     d8c:	8c 93       	st	X, r24
     d8e:	99 c0       	rjmp	.+306    	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRA_REG,copy_u8PinId);
     d90:	aa e3       	ldi	r26, 0x3A	; 58
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	ea e3       	ldi	r30, 0x3A	; 58
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_u8SetPinDirection+0xc8>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_u8SetPinDirection+0xc4>
     db2:	84 2b       	or	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	85 c0       	rjmp	.+266    	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 }
		  break;
		  case DIO_u8_PORTB :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	88 23       	and	r24, r24
     dbc:	a9 f4       	brne	.+42     	; 0xde8 <DIO_u8SetPinDirection+0x102>
			 {
				 CLR_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_u8SetPinDirection+0xf6>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_u8SetPinDirection+0xf2>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	6d c0       	rjmp	.+218    	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRB_REG,copy_u8PinId);
     de8:	a7 e3       	ldi	r26, 0x37	; 55
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	e7 e3       	ldi	r30, 0x37	; 55
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	48 2f       	mov	r20, r24
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	28 2f       	mov	r18, r24
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	02 2e       	mov	r0, r18
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <DIO_u8SetPinDirection+0x120>
     e02:	88 0f       	add	r24, r24
     e04:	99 1f       	adc	r25, r25
     e06:	0a 94       	dec	r0
     e08:	e2 f7       	brpl	.-8      	; 0xe02 <DIO_u8SetPinDirection+0x11c>
     e0a:	84 2b       	or	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	59 c0       	rjmp	.+178    	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 }
		  break;
		  case DIO_u8_PORTC :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     e10:	8c 81       	ldd	r24, Y+4	; 0x04
     e12:	88 23       	and	r24, r24
     e14:	a9 f4       	brne	.+42     	; 0xe40 <DIO_u8SetPinDirection+0x15a>
			 {
				 CLR_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     e16:	a4 e3       	ldi	r26, 0x34	; 52
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e4 e3       	ldi	r30, 0x34	; 52
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8b 81       	ldd	r24, Y+3	; 0x03
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <DIO_u8SetPinDirection+0x14e>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <DIO_u8SetPinDirection+0x14a>
     e38:	80 95       	com	r24
     e3a:	84 23       	and	r24, r20
     e3c:	8c 93       	st	X, r24
     e3e:	41 c0       	rjmp	.+130    	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRC_REG,copy_u8PinId);
     e40:	a4 e3       	ldi	r26, 0x34	; 52
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e4 e3       	ldi	r30, 0x34	; 52
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	48 2f       	mov	r20, r24
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	28 2f       	mov	r18, r24
     e50:	30 e0       	ldi	r19, 0x00	; 0
     e52:	81 e0       	ldi	r24, 0x01	; 1
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	02 2e       	mov	r0, r18
     e58:	02 c0       	rjmp	.+4      	; 0xe5e <DIO_u8SetPinDirection+0x178>
     e5a:	88 0f       	add	r24, r24
     e5c:	99 1f       	adc	r25, r25
     e5e:	0a 94       	dec	r0
     e60:	e2 f7       	brpl	.-8      	; 0xe5a <DIO_u8SetPinDirection+0x174>
     e62:	84 2b       	or	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	2d c0       	rjmp	.+90     	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 }
		 break;
		 case DIO_u8_PORTD :
			 if(copy_u8PinDirection == DIO_u8_INPUT)
     e68:	8c 81       	ldd	r24, Y+4	; 0x04
     e6a:	88 23       	and	r24, r24
     e6c:	a9 f4       	brne	.+42     	; 0xe98 <DIO_u8SetPinDirection+0x1b2>
			 {
				 CLR_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     e6e:	a1 e3       	ldi	r26, 0x31	; 49
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <DIO_u8SetPinDirection+0x1a6>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <DIO_u8SetPinDirection+0x1a2>
     e90:	80 95       	com	r24
     e92:	84 23       	and	r24, r20
     e94:	8c 93       	st	X, r24
     e96:	15 c0       	rjmp	.+42     	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 }
			 else
			 {
				 SET_BIT(DIO_U8_DDRD_REG,copy_u8PinId);
     e98:	a1 e3       	ldi	r26, 0x31	; 49
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e1 e3       	ldi	r30, 0x31	; 49
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_u8SetPinDirection+0x1d0>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_u8SetPinDirection+0x1cc>
     eba:	84 2b       	or	r24, r20
     ebc:	8c 93       	st	X, r24
     ebe:	01 c0       	rjmp	.+2      	; 0xec2 <DIO_u8SetPinDirection+0x1dc>
			 		 
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK;
     ec0:	19 82       	std	Y+1, r1	; 0x01
		
	}
	return local_u8ErrorState;
     ec2:	89 81       	ldd	r24, Y+1	; 0x01
}
     ec4:	26 96       	adiw	r28, 0x06	; 6
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	de bf       	out	0x3e, r29	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	cd bf       	out	0x3d, r28	; 61
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <DIO_u8SetPinValue>:

u8   DIO_u8SetPinValue     (u8 copy_u8PortId, u8   copy_u8PinId ,u8  copy_u8PinValue) 
{
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	00 d0       	rcall	.+0      	; 0xedc <DIO_u8SetPinValue+0x6>
     edc:	00 d0       	rcall	.+0      	; 0xede <DIO_u8SetPinValue+0x8>
     ede:	00 d0       	rcall	.+0      	; 0xee0 <DIO_u8SetPinValue+0xa>
     ee0:	cd b7       	in	r28, 0x3d	; 61
     ee2:	de b7       	in	r29, 0x3e	; 62
     ee4:	8a 83       	std	Y+2, r24	; 0x02
     ee6:	6b 83       	std	Y+3, r22	; 0x03
     ee8:	4c 83       	std	Y+4, r20	; 0x04
	u8 local_u8ErrorState = STD_TYPES_OK;
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PinId<=DIO_u8_PIN7)&&
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	84 30       	cpi	r24, 0x04	; 4
     ef2:	08 f0       	brcs	.+2      	; 0xef6 <DIO_u8SetPinValue+0x20>
     ef4:	dd c0       	rjmp	.+442    	; 0x10b0 <DIO_u8SetPinValue+0x1da>
     ef6:	8b 81       	ldd	r24, Y+3	; 0x03
     ef8:	88 30       	cpi	r24, 0x08	; 8
     efa:	08 f0       	brcs	.+2      	; 0xefe <DIO_u8SetPinValue+0x28>
     efc:	d9 c0       	rjmp	.+434    	; 0x10b0 <DIO_u8SetPinValue+0x1da>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	88 23       	and	r24, r24
     f02:	21 f0       	breq	.+8      	; 0xf0c <DIO_u8SetPinValue+0x36>
     f04:	8c 81       	ldd	r24, Y+4	; 0x04
     f06:	81 30       	cpi	r24, 0x01	; 1
     f08:	09 f0       	breq	.+2      	; 0xf0c <DIO_u8SetPinValue+0x36>
     f0a:	d2 c0       	rjmp	.+420    	; 0x10b0 <DIO_u8SetPinValue+0x1da>
	  ((copy_u8PinValue ==LOW)||(copy_u8PinValue ==HIGH)))
	  {
		  switch(copy_u8PortId)
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3e 83       	std	Y+6, r19	; 0x06
     f14:	2d 83       	std	Y+5, r18	; 0x05
     f16:	8d 81       	ldd	r24, Y+5	; 0x05
     f18:	9e 81       	ldd	r25, Y+6	; 0x06
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	09 f4       	brne	.+2      	; 0xf22 <DIO_u8SetPinValue+0x4c>
     f20:	43 c0       	rjmp	.+134    	; 0xfa8 <DIO_u8SetPinValue+0xd2>
     f22:	2d 81       	ldd	r18, Y+5	; 0x05
     f24:	3e 81       	ldd	r19, Y+6	; 0x06
     f26:	22 30       	cpi	r18, 0x02	; 2
     f28:	31 05       	cpc	r19, r1
     f2a:	2c f4       	brge	.+10     	; 0xf36 <DIO_u8SetPinValue+0x60>
     f2c:	8d 81       	ldd	r24, Y+5	; 0x05
     f2e:	9e 81       	ldd	r25, Y+6	; 0x06
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	71 f0       	breq	.+28     	; 0xf50 <DIO_u8SetPinValue+0x7a>
     f34:	be c0       	rjmp	.+380    	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
     f36:	2d 81       	ldd	r18, Y+5	; 0x05
     f38:	3e 81       	ldd	r19, Y+6	; 0x06
     f3a:	22 30       	cpi	r18, 0x02	; 2
     f3c:	31 05       	cpc	r19, r1
     f3e:	09 f4       	brne	.+2      	; 0xf42 <DIO_u8SetPinValue+0x6c>
     f40:	5f c0       	rjmp	.+190    	; 0x1000 <DIO_u8SetPinValue+0x12a>
     f42:	8d 81       	ldd	r24, Y+5	; 0x05
     f44:	9e 81       	ldd	r25, Y+6	; 0x06
     f46:	83 30       	cpi	r24, 0x03	; 3
     f48:	91 05       	cpc	r25, r1
     f4a:	09 f4       	brne	.+2      	; 0xf4e <DIO_u8SetPinValue+0x78>
     f4c:	85 c0       	rjmp	.+266    	; 0x1058 <DIO_u8SetPinValue+0x182>
     f4e:	b1 c0       	rjmp	.+354    	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		  {
			 case DIO_u8_PORTA :
		       if(copy_u8PinValue == LOW)
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	88 23       	and	r24, r24
     f54:	a9 f4       	brne	.+42     	; 0xf80 <DIO_u8SetPinValue+0xaa>
		        {
			      CLR_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     f56:	ab e3       	ldi	r26, 0x3B	; 59
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	eb e3       	ldi	r30, 0x3B	; 59
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	48 2f       	mov	r20, r24
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	28 2f       	mov	r18, r24
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	02 2e       	mov	r0, r18
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <DIO_u8SetPinValue+0x9e>
     f70:	88 0f       	add	r24, r24
     f72:	99 1f       	adc	r25, r25
     f74:	0a 94       	dec	r0
     f76:	e2 f7       	brpl	.-8      	; 0xf70 <DIO_u8SetPinValue+0x9a>
     f78:	80 95       	com	r24
     f7a:	84 23       	and	r24, r20
     f7c:	8c 93       	st	X, r24
     f7e:	99 c0       	rjmp	.+306    	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTA_REG,copy_u8PinId);
     f80:	ab e3       	ldi	r26, 0x3B	; 59
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	eb e3       	ldi	r30, 0x3B	; 59
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <DIO_u8SetPinValue+0xc8>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <DIO_u8SetPinValue+0xc4>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	85 c0       	rjmp	.+266    	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTB :
		       if(copy_u8PinValue == LOW)
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	88 23       	and	r24, r24
     fac:	a9 f4       	brne	.+42     	; 0xfd8 <DIO_u8SetPinValue+0x102>
		        {
			      CLR_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     fae:	a8 e3       	ldi	r26, 0x38	; 56
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	e8 e3       	ldi	r30, 0x38	; 56
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_u8SetPinValue+0xf6>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_u8SetPinValue+0xf2>
     fd0:	80 95       	com	r24
     fd2:	84 23       	and	r24, r20
     fd4:	8c 93       	st	X, r24
     fd6:	6d c0       	rjmp	.+218    	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTB_REG,copy_u8PinId);
     fd8:	a8 e3       	ldi	r26, 0x38	; 56
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e8 e3       	ldi	r30, 0x38	; 56
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <DIO_u8SetPinValue+0x120>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <DIO_u8SetPinValue+0x11c>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	59 c0       	rjmp	.+178    	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTC :
		       if(copy_u8PinValue == LOW)
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	88 23       	and	r24, r24
    1004:	a9 f4       	brne	.+42     	; 0x1030 <DIO_u8SetPinValue+0x15a>
		        {
			      CLR_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
    1006:	a5 e3       	ldi	r26, 0x35	; 53
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e5 e3       	ldi	r30, 0x35	; 53
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_u8SetPinValue+0x14e>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_u8SetPinValue+0x14a>
    1028:	80 95       	com	r24
    102a:	84 23       	and	r24, r20
    102c:	8c 93       	st	X, r24
    102e:	41 c0       	rjmp	.+130    	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTC_REG,copy_u8PinId);
    1030:	a5 e3       	ldi	r26, 0x35	; 53
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e3       	ldi	r30, 0x35	; 53
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <DIO_u8SetPinValue+0x178>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <DIO_u8SetPinValue+0x174>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	2d c0       	rjmp	.+90     	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		        }
			break;
			case DIO_u8_PORTD :
		       if(copy_u8PinValue == LOW)
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	88 23       	and	r24, r24
    105c:	a9 f4       	brne	.+42     	; 0x1088 <DIO_u8SetPinValue+0x1b2>
		        {
			      CLR_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    105e:	a2 e3       	ldi	r26, 0x32	; 50
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e2 e3       	ldi	r30, 0x32	; 50
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_u8SetPinValue+0x1a6>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_u8SetPinValue+0x1a2>
    1080:	80 95       	com	r24
    1082:	84 23       	and	r24, r20
    1084:	8c 93       	st	X, r24
    1086:	15 c0       	rjmp	.+42     	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
		        }
		       else
		        {
			     SET_BIT(DIO_U8_PORTD_REG,copy_u8PinId);
    1088:	a2 e3       	ldi	r26, 0x32	; 50
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e2 e3       	ldi	r30, 0x32	; 50
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_u8SetPinValue+0x1d0>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_u8SetPinValue+0x1cc>
    10aa:	84 2b       	or	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	01 c0       	rjmp	.+2      	; 0x10b2 <DIO_u8SetPinValue+0x1dc>
			   
		  }
	  }
	else
	{
		local_u8ErrorState =STD_TYPES_NOK ;
    10b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    10b4:	26 96       	adiw	r28, 0x06	; 6
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	cf 91       	pop	r28
    10c2:	df 91       	pop	r29
    10c4:	08 95       	ret

000010c6 <DIO_u8GetPinValue>:
 
u8   DIO_u8GetPinValue     (u8 copy_u8PortId, u8   copy_u8PinId ,u8  *copy_Pu8PinValue) 
{
    10c6:	df 93       	push	r29
    10c8:	cf 93       	push	r28
    10ca:	cd b7       	in	r28, 0x3d	; 61
    10cc:	de b7       	in	r29, 0x3e	; 62
    10ce:	28 97       	sbiw	r28, 0x08	; 8
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	6c 83       	std	Y+4, r22	; 0x04
    10de:	5e 83       	std	Y+6, r21	; 0x06
    10e0:	4d 83       	std	Y+5, r20	; 0x05
	u8 local_u8ErrorState = STD_TYPES_OK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	8a 83       	std	Y+2, r24	; 0x02
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PinId <=DIO_u8_PIN7)&&(copy_Pu8PinValue != NULL))
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	84 30       	cpi	r24, 0x04	; 4
    10ea:	08 f0       	brcs	.+2      	; 0x10ee <DIO_u8GetPinValue+0x28>
    10ec:	9f c0       	rjmp	.+318    	; 0x122c <DIO_u8GetPinValue+0x166>
    10ee:	8c 81       	ldd	r24, Y+4	; 0x04
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <DIO_u8GetPinValue+0x30>
    10f4:	9b c0       	rjmp	.+310    	; 0x122c <DIO_u8GetPinValue+0x166>
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	00 97       	sbiw	r24, 0x00	; 0
    10fc:	09 f4       	brne	.+2      	; 0x1100 <DIO_u8GetPinValue+0x3a>
    10fe:	96 c0       	rjmp	.+300    	; 0x122c <DIO_u8GetPinValue+0x166>
	{
		u8 local_returnValue;
		switch(copy_u8PortId)
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	38 87       	std	Y+8, r19	; 0x08
    1108:	2f 83       	std	Y+7, r18	; 0x07
    110a:	4f 81       	ldd	r20, Y+7	; 0x07
    110c:	58 85       	ldd	r21, Y+8	; 0x08
    110e:	41 30       	cpi	r20, 0x01	; 1
    1110:	51 05       	cpc	r21, r1
    1112:	a9 f1       	breq	.+106    	; 0x117e <DIO_u8GetPinValue+0xb8>
    1114:	8f 81       	ldd	r24, Y+7	; 0x07
    1116:	98 85       	ldd	r25, Y+8	; 0x08
    1118:	82 30       	cpi	r24, 0x02	; 2
    111a:	91 05       	cpc	r25, r1
    111c:	34 f4       	brge	.+12     	; 0x112a <DIO_u8GetPinValue+0x64>
    111e:	2f 81       	ldd	r18, Y+7	; 0x07
    1120:	38 85       	ldd	r19, Y+8	; 0x08
    1122:	21 15       	cp	r18, r1
    1124:	31 05       	cpc	r19, r1
    1126:	71 f0       	breq	.+28     	; 0x1144 <DIO_u8GetPinValue+0x7e>
    1128:	82 c0       	rjmp	.+260    	; 0x122e <DIO_u8GetPinValue+0x168>
    112a:	4f 81       	ldd	r20, Y+7	; 0x07
    112c:	58 85       	ldd	r21, Y+8	; 0x08
    112e:	42 30       	cpi	r20, 0x02	; 2
    1130:	51 05       	cpc	r21, r1
    1132:	09 f4       	brne	.+2      	; 0x1136 <DIO_u8GetPinValue+0x70>
    1134:	41 c0       	rjmp	.+130    	; 0x11b8 <DIO_u8GetPinValue+0xf2>
    1136:	8f 81       	ldd	r24, Y+7	; 0x07
    1138:	98 85       	ldd	r25, Y+8	; 0x08
    113a:	83 30       	cpi	r24, 0x03	; 3
    113c:	91 05       	cpc	r25, r1
    113e:	09 f4       	brne	.+2      	; 0x1142 <DIO_u8GetPinValue+0x7c>
    1140:	58 c0       	rjmp	.+176    	; 0x11f2 <DIO_u8GetPinValue+0x12c>
    1142:	75 c0       	rjmp	.+234    	; 0x122e <DIO_u8GetPinValue+0x168>
		{
			case DIO_u8_PORTA :
			 local_returnValue = GET_BIT(DIO_U8_PINA_REG,copy_u8PinId);
    1144:	e9 e3       	ldi	r30, 0x39	; 57
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	28 2f       	mov	r18, r24
    114c:	30 e0       	ldi	r19, 0x00	; 0
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	a9 01       	movw	r20, r18
    1156:	02 c0       	rjmp	.+4      	; 0x115c <DIO_u8GetPinValue+0x96>
    1158:	55 95       	asr	r21
    115a:	47 95       	ror	r20
    115c:	8a 95       	dec	r24
    115e:	e2 f7       	brpl	.-8      	; 0x1158 <DIO_u8GetPinValue+0x92>
    1160:	ca 01       	movw	r24, r20
    1162:	81 70       	andi	r24, 0x01	; 1
    1164:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	29 f4       	brne	.+10     	; 0x1176 <DIO_u8GetPinValue+0xb0>
			  *copy_Pu8PinValue = HIGH;
    116c:	ed 81       	ldd	r30, Y+5	; 0x05
    116e:	fe 81       	ldd	r31, Y+6	; 0x06
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	80 83       	st	Z, r24
    1174:	5c c0       	rjmp	.+184    	; 0x122e <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 
    1176:	ed 81       	ldd	r30, Y+5	; 0x05
    1178:	fe 81       	ldd	r31, Y+6	; 0x06
    117a:	10 82       	st	Z, r1
    117c:	58 c0       	rjmp	.+176    	; 0x122e <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTB :
			  local_returnValue = GET_BIT(DIO_U8_PINB_REG,copy_u8PinId);
    117e:	e6 e3       	ldi	r30, 0x36	; 54
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	28 2f       	mov	r18, r24
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	8c 81       	ldd	r24, Y+4	; 0x04
    118a:	88 2f       	mov	r24, r24
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	a9 01       	movw	r20, r18
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <DIO_u8GetPinValue+0xd0>
    1192:	55 95       	asr	r21
    1194:	47 95       	ror	r20
    1196:	8a 95       	dec	r24
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <DIO_u8GetPinValue+0xcc>
    119a:	ca 01       	movw	r24, r20
    119c:	81 70       	andi	r24, 0x01	; 1
    119e:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	29 f4       	brne	.+10     	; 0x11b0 <DIO_u8GetPinValue+0xea>
			  *copy_Pu8PinValue = HIGH;
    11a6:	ed 81       	ldd	r30, Y+5	; 0x05
    11a8:	fe 81       	ldd	r31, Y+6	; 0x06
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	80 83       	st	Z, r24
    11ae:	3f c0       	rjmp	.+126    	; 0x122e <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
    11b0:	ed 81       	ldd	r30, Y+5	; 0x05
    11b2:	fe 81       	ldd	r31, Y+6	; 0x06
    11b4:	10 82       	st	Z, r1
    11b6:	3b c0       	rjmp	.+118    	; 0x122e <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTC :
			 local_returnValue = GET_BIT(DIO_U8_PINC_REG,copy_u8PinId);
    11b8:	e3 e3       	ldi	r30, 0x33	; 51
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	88 2f       	mov	r24, r24
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	a9 01       	movw	r20, r18
    11ca:	02 c0       	rjmp	.+4      	; 0x11d0 <DIO_u8GetPinValue+0x10a>
    11cc:	55 95       	asr	r21
    11ce:	47 95       	ror	r20
    11d0:	8a 95       	dec	r24
    11d2:	e2 f7       	brpl	.-8      	; 0x11cc <DIO_u8GetPinValue+0x106>
    11d4:	ca 01       	movw	r24, r20
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	81 30       	cpi	r24, 0x01	; 1
    11de:	29 f4       	brne	.+10     	; 0x11ea <DIO_u8GetPinValue+0x124>
			  *copy_Pu8PinValue = HIGH;
    11e0:	ed 81       	ldd	r30, Y+5	; 0x05
    11e2:	fe 81       	ldd	r31, Y+6	; 0x06
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	80 83       	st	Z, r24
    11e8:	22 c0       	rjmp	.+68     	; 0x122e <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
    11ea:	ed 81       	ldd	r30, Y+5	; 0x05
    11ec:	fe 81       	ldd	r31, Y+6	; 0x06
    11ee:	10 82       	st	Z, r1
    11f0:	1e c0       	rjmp	.+60     	; 0x122e <DIO_u8GetPinValue+0x168>
			break;
			case DIO_u8_PORTD :
			 local_returnValue = GET_BIT(DIO_U8_PIND_REG,copy_u8PinId);
    11f2:	e0 e3       	ldi	r30, 0x30	; 48
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	28 2f       	mov	r18, r24
    11fa:	30 e0       	ldi	r19, 0x00	; 0
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	88 2f       	mov	r24, r24
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a9 01       	movw	r20, r18
    1204:	02 c0       	rjmp	.+4      	; 0x120a <DIO_u8GetPinValue+0x144>
    1206:	55 95       	asr	r21
    1208:	47 95       	ror	r20
    120a:	8a 95       	dec	r24
    120c:	e2 f7       	brpl	.-8      	; 0x1206 <DIO_u8GetPinValue+0x140>
    120e:	ca 01       	movw	r24, r20
    1210:	81 70       	andi	r24, 0x01	; 1
    1212:	89 83       	std	Y+1, r24	; 0x01
			 if(local_returnValue == 1)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	29 f4       	brne	.+10     	; 0x1224 <DIO_u8GetPinValue+0x15e>
			  *copy_Pu8PinValue = HIGH;
    121a:	ed 81       	ldd	r30, Y+5	; 0x05
    121c:	fe 81       	ldd	r31, Y+6	; 0x06
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	80 83       	st	Z, r24
    1222:	05 c0       	rjmp	.+10     	; 0x122e <DIO_u8GetPinValue+0x168>
		     else
				*copy_Pu8PinValue = LOW; 			 
    1224:	ed 81       	ldd	r30, Y+5	; 0x05
    1226:	fe 81       	ldd	r31, Y+6	; 0x06
    1228:	10 82       	st	Z, r1
    122a:	01 c0       	rjmp	.+2      	; 0x122e <DIO_u8GetPinValue+0x168>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
    122c:	1a 82       	std	Y+2, r1	; 0x02
	}
	return local_u8ErrorState ;
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
	
	
	
}
    1230:	28 96       	adiw	r28, 0x08	; 8
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	f8 94       	cli
    1236:	de bf       	out	0x3e, r29	; 62
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	cd bf       	out	0x3d, r28	; 61
    123c:	cf 91       	pop	r28
    123e:	df 91       	pop	r29
    1240:	08 95       	ret

00001242 <DIO_u8SetPortDirection>:

u8   DIO_u8SetPortDirection (u8 copy_u8PortId, u8   copy_u8PinDirection)
{
    1242:	df 93       	push	r29
    1244:	cf 93       	push	r28
    1246:	00 d0       	rcall	.+0      	; 0x1248 <DIO_u8SetPortDirection+0x6>
    1248:	00 d0       	rcall	.+0      	; 0x124a <DIO_u8SetPortDirection+0x8>
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	8a 83       	std	Y+2, r24	; 0x02
    1252:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK ;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&((copy_u8PinDirection ==DIO_u8_INPUT)||(copy_u8PinDirection ==DIO_u8_OUTPUT)))
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	84 30       	cpi	r24, 0x04	; 4
    125c:	08 f0       	brcs	.+2      	; 0x1260 <DIO_u8SetPortDirection+0x1e>
    125e:	56 c0       	rjmp	.+172    	; 0x130c <DIO_u8SetPortDirection+0xca>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	88 23       	and	r24, r24
    1264:	21 f0       	breq	.+8      	; 0x126e <DIO_u8SetPortDirection+0x2c>
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	09 f0       	breq	.+2      	; 0x126e <DIO_u8SetPortDirection+0x2c>
    126c:	4f c0       	rjmp	.+158    	; 0x130c <DIO_u8SetPortDirection+0xca>
	{
		switch(copy_u8PortId)
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	3d 83       	std	Y+5, r19	; 0x05
    1276:	2c 83       	std	Y+4, r18	; 0x04
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	91 05       	cpc	r25, r1
    1280:	09 f1       	breq	.+66     	; 0x12c4 <DIO_u8SetPortDirection+0x82>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	2c f4       	brge	.+10     	; 0x1296 <DIO_u8SetPortDirection+0x54>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	61 f0       	breq	.+24     	; 0x12ac <DIO_u8SetPortDirection+0x6a>
    1294:	3c c0       	rjmp	.+120    	; 0x130e <DIO_u8SetPortDirection+0xcc>
    1296:	2c 81       	ldd	r18, Y+4	; 0x04
    1298:	3d 81       	ldd	r19, Y+5	; 0x05
    129a:	22 30       	cpi	r18, 0x02	; 2
    129c:	31 05       	cpc	r19, r1
    129e:	f1 f0       	breq	.+60     	; 0x12dc <DIO_u8SetPortDirection+0x9a>
    12a0:	8c 81       	ldd	r24, Y+4	; 0x04
    12a2:	9d 81       	ldd	r25, Y+5	; 0x05
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	91 05       	cpc	r25, r1
    12a8:	29 f1       	breq	.+74     	; 0x12f4 <DIO_u8SetPortDirection+0xb2>
    12aa:	31 c0       	rjmp	.+98     	; 0x130e <DIO_u8SetPortDirection+0xcc>
		{
			case DIO_u8_PORTA :
			  if(copy_u8PinDirection == HIGH)
    12ac:	8b 81       	ldd	r24, Y+3	; 0x03
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	29 f4       	brne	.+10     	; 0x12bc <DIO_u8SetPortDirection+0x7a>
			  {
				 SET_PORT(DIO_U8_DDRA_REG);
    12b2:	ea e3       	ldi	r30, 0x3A	; 58
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	8f ef       	ldi	r24, 0xFF	; 255
    12b8:	80 83       	st	Z, r24
    12ba:	29 c0       	rjmp	.+82     	; 0x130e <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRA_REG);
    12bc:	ea e3       	ldi	r30, 0x3A	; 58
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	10 82       	st	Z, r1
    12c2:	25 c0       	rjmp	.+74     	; 0x130e <DIO_u8SetPortDirection+0xcc>
			  }
			break;  
			case DIO_u8_PORTB :
			  if(copy_u8PinDirection == HIGH)
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	81 30       	cpi	r24, 0x01	; 1
    12c8:	29 f4       	brne	.+10     	; 0x12d4 <DIO_u8SetPortDirection+0x92>
			  {
				 SET_PORT(DIO_U8_DDRB_REG);
    12ca:	e7 e3       	ldi	r30, 0x37	; 55
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	80 83       	st	Z, r24
    12d2:	1d c0       	rjmp	.+58     	; 0x130e <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRB_REG);
    12d4:	e7 e3       	ldi	r30, 0x37	; 55
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	10 82       	st	Z, r1
    12da:	19 c0       	rjmp	.+50     	; 0x130e <DIO_u8SetPortDirection+0xcc>
			  }
			break;
			case DIO_u8_PORTC :
			  if(copy_u8PinDirection == HIGH)
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	29 f4       	brne	.+10     	; 0x12ec <DIO_u8SetPortDirection+0xaa>
			  {
				 SET_PORT(DIO_U8_DDRC_REG);
    12e2:	e4 e3       	ldi	r30, 0x34	; 52
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	8f ef       	ldi	r24, 0xFF	; 255
    12e8:	80 83       	st	Z, r24
    12ea:	11 c0       	rjmp	.+34     	; 0x130e <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRC_REG);
    12ec:	e4 e3       	ldi	r30, 0x34	; 52
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	10 82       	st	Z, r1
    12f2:	0d c0       	rjmp	.+26     	; 0x130e <DIO_u8SetPortDirection+0xcc>
			  }
			break;
			case DIO_u8_PORTD :
			  if(copy_u8PinDirection == HIGH)
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	81 30       	cpi	r24, 0x01	; 1
    12f8:	29 f4       	brne	.+10     	; 0x1304 <DIO_u8SetPortDirection+0xc2>
			  {
				 SET_PORT(DIO_U8_DDRD_REG);
    12fa:	e1 e3       	ldi	r30, 0x31	; 49
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8f ef       	ldi	r24, 0xFF	; 255
    1300:	80 83       	st	Z, r24
    1302:	05 c0       	rjmp	.+10     	; 0x130e <DIO_u8SetPortDirection+0xcc>
			  }
			  else
			  {
				  CLR_PORT(DIO_U8_DDRD_REG);
    1304:	e1 e3       	ldi	r30, 0x31	; 49
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	10 82       	st	Z, r1
    130a:	01 c0       	rjmp	.+2      	; 0x130e <DIO_u8SetPortDirection+0xcc>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK;
    130c:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    130e:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <DIO_u8SetPortValue>:


u8   DIO_u8SetPortValue    (u8 copy_u8PortId, u8   copy_u8PortValue) 
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <DIO_u8SetPortValue+0x6>
    1326:	00 d0       	rcall	.+0      	; 0x1328 <DIO_u8SetPortValue+0x8>
    1328:	0f 92       	push	r0
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
    132e:	8a 83       	std	Y+2, r24	; 0x02
    1330:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_u8PortValue<=MAX_PORT_VALUE))
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	84 30       	cpi	r24, 0x04	; 4
    133a:	98 f5       	brcc	.+102    	; 0x13a2 <DIO_u8SetPortValue+0x82>
	{
		switch(copy_u8PortId)
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3d 83       	std	Y+5, r19	; 0x05
    1344:	2c 83       	std	Y+4, r18	; 0x04
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	9d 81       	ldd	r25, Y+5	; 0x05
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	91 05       	cpc	r25, r1
    134e:	d1 f0       	breq	.+52     	; 0x1384 <DIO_u8SetPortValue+0x64>
    1350:	2c 81       	ldd	r18, Y+4	; 0x04
    1352:	3d 81       	ldd	r19, Y+5	; 0x05
    1354:	22 30       	cpi	r18, 0x02	; 2
    1356:	31 05       	cpc	r19, r1
    1358:	2c f4       	brge	.+10     	; 0x1364 <DIO_u8SetPortValue+0x44>
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	00 97       	sbiw	r24, 0x00	; 0
    1360:	61 f0       	breq	.+24     	; 0x137a <DIO_u8SetPortValue+0x5a>
    1362:	20 c0       	rjmp	.+64     	; 0x13a4 <DIO_u8SetPortValue+0x84>
    1364:	2c 81       	ldd	r18, Y+4	; 0x04
    1366:	3d 81       	ldd	r19, Y+5	; 0x05
    1368:	22 30       	cpi	r18, 0x02	; 2
    136a:	31 05       	cpc	r19, r1
    136c:	81 f0       	breq	.+32     	; 0x138e <DIO_u8SetPortValue+0x6e>
    136e:	8c 81       	ldd	r24, Y+4	; 0x04
    1370:	9d 81       	ldd	r25, Y+5	; 0x05
    1372:	83 30       	cpi	r24, 0x03	; 3
    1374:	91 05       	cpc	r25, r1
    1376:	81 f0       	breq	.+32     	; 0x1398 <DIO_u8SetPortValue+0x78>
    1378:	15 c0       	rjmp	.+42     	; 0x13a4 <DIO_u8SetPortValue+0x84>
		{
			case DIO_u8_PORTA :
				DIO_U8_PORTA_REG = copy_u8PortValue;
    137a:	eb e3       	ldi	r30, 0x3B	; 59
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	80 83       	st	Z, r24
    1382:	10 c0       	rjmp	.+32     	; 0x13a4 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTB :
				DIO_U8_PORTB_REG = copy_u8PortValue;
    1384:	e8 e3       	ldi	r30, 0x38	; 56
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	80 83       	st	Z, r24
    138c:	0b c0       	rjmp	.+22     	; 0x13a4 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTC :
				DIO_U8_PORTC_REG = copy_u8PortValue;
    138e:	e5 e3       	ldi	r30, 0x35	; 53
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	80 83       	st	Z, r24
    1396:	06 c0       	rjmp	.+12     	; 0x13a4 <DIO_u8SetPortValue+0x84>
			break;
			case DIO_u8_PORTD :
				DIO_U8_PORTD_REG = copy_u8PortValue;
    1398:	e2 e3       	ldi	r30, 0x32	; 50
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	80 83       	st	Z, r24
    13a0:	01 c0       	rjmp	.+2      	; 0x13a4 <DIO_u8SetPortValue+0x84>
		}
		
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
    13a2:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	08 95       	ret

000013b6 <DIO_u8GetPortValue>:

u8   DIO_u8GetPortValue    (u8 copy_u8PortId, u8 * copy_Pu8PortValue) 
{
    13b6:	df 93       	push	r29
    13b8:	cf 93       	push	r28
    13ba:	00 d0       	rcall	.+0      	; 0x13bc <DIO_u8GetPortValue+0x6>
    13bc:	00 d0       	rcall	.+0      	; 0x13be <DIO_u8GetPortValue+0x8>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <DIO_u8GetPortValue+0xa>
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
    13c4:	8a 83       	std	Y+2, r24	; 0x02
    13c6:	7c 83       	std	Y+4, r23	; 0x04
    13c8:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8ErrorState = STD_TYPES_OK;
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	89 83       	std	Y+1, r24	; 0x01
	if((copy_u8PortId <=DIO_u8_PORTD)&&(copy_Pu8PortValue != NULL))
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <DIO_u8GetPortValue+0x20>
    13d4:	3f c0       	rjmp	.+126    	; 0x1454 <DIO_u8GetPortValue+0x9e>
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	9c 81       	ldd	r25, Y+4	; 0x04
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	d9 f1       	breq	.+118    	; 0x1454 <DIO_u8GetPortValue+0x9e>
	{
		switch(copy_u8PortId)
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	3e 83       	std	Y+6, r19	; 0x06
    13e6:	2d 83       	std	Y+5, r18	; 0x05
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	91 05       	cpc	r25, r1
    13f0:	e1 f0       	breq	.+56     	; 0x142a <DIO_u8GetPortValue+0x74>
    13f2:	2d 81       	ldd	r18, Y+5	; 0x05
    13f4:	3e 81       	ldd	r19, Y+6	; 0x06
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	2c f4       	brge	.+10     	; 0x1406 <DIO_u8GetPortValue+0x50>
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	61 f0       	breq	.+24     	; 0x141c <DIO_u8GetPortValue+0x66>
    1404:	28 c0       	rjmp	.+80     	; 0x1456 <DIO_u8GetPortValue+0xa0>
    1406:	2d 81       	ldd	r18, Y+5	; 0x05
    1408:	3e 81       	ldd	r19, Y+6	; 0x06
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	a1 f0       	breq	.+40     	; 0x1438 <DIO_u8GetPortValue+0x82>
    1410:	8d 81       	ldd	r24, Y+5	; 0x05
    1412:	9e 81       	ldd	r25, Y+6	; 0x06
    1414:	83 30       	cpi	r24, 0x03	; 3
    1416:	91 05       	cpc	r25, r1
    1418:	b1 f0       	breq	.+44     	; 0x1446 <DIO_u8GetPortValue+0x90>
    141a:	1d c0       	rjmp	.+58     	; 0x1456 <DIO_u8GetPortValue+0xa0>
		{
			case DIO_u8_PORTA :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINA_REG);
    141c:	e9 e3       	ldi	r30, 0x39	; 57
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	eb 81       	ldd	r30, Y+3	; 0x03
    1424:	fc 81       	ldd	r31, Y+4	; 0x04
    1426:	80 83       	st	Z, r24
    1428:	16 c0       	rjmp	.+44     	; 0x1456 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTB :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINB_REG);
    142a:	e6 e3       	ldi	r30, 0x36	; 54
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	eb 81       	ldd	r30, Y+3	; 0x03
    1432:	fc 81       	ldd	r31, Y+4	; 0x04
    1434:	80 83       	st	Z, r24
    1436:	0f c0       	rjmp	.+30     	; 0x1456 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTC :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PINC_REG);
    1438:	e3 e3       	ldi	r30, 0x33	; 51
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	eb 81       	ldd	r30, Y+3	; 0x03
    1440:	fc 81       	ldd	r31, Y+4	; 0x04
    1442:	80 83       	st	Z, r24
    1444:	08 c0       	rjmp	.+16     	; 0x1456 <DIO_u8GetPortValue+0xa0>
			break;
			case DIO_u8_PORTD :
			  *copy_Pu8PortValue = GET_PORT(DIO_U8_PIND_REG);
    1446:	e0 e3       	ldi	r30, 0x30	; 48
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	80 81       	ld	r24, Z
    144c:	eb 81       	ldd	r30, Y+3	; 0x03
    144e:	fc 81       	ldd	r31, Y+4	; 0x04
    1450:	80 83       	st	Z, r24
    1452:	01 c0       	rjmp	.+2      	; 0x1456 <DIO_u8GetPortValue+0xa0>
			break;			
		}
	}
	else
	{
		local_u8ErrorState = STD_TYPES_NOK ;
    1454:	19 82       	std	Y+1, r1	; 0x01
	}
	return local_u8ErrorState ;
    1456:	89 81       	ldd	r24, Y+1	; 0x01
}
    1458:	26 96       	adiw	r28, 0x06	; 6
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	cf 91       	pop	r28
    1466:	df 91       	pop	r29
    1468:	08 95       	ret

0000146a <KPD_u8GetSwitch>:




u8 KPD_u8GetSwitch(u8 *copy_Pu8ReturenedSwitch)
{
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	27 97       	sbiw	r28, 0x07	; 7
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	9f 83       	std	Y+7, r25	; 0x07
    1480:	8e 83       	std	Y+6, r24	; 0x06
	u8 local_u8ReturnStet = STD_TYPES_OK ;
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	8c 83       	std	Y+4, r24	; 0x04
	u8 local_u8PinValue,flag=0;
    1486:	1b 82       	std	Y+3, r1	; 0x03
	static u8 local_Au8RowsPinArr[KPD_U8_ROWS_NUM] = KPD_U8_ROWS_PINS;
	static u8 local_Au8ColsPinArr[KPD_U8_COLS_NUM] = KPD_U8_COLS_PINS;
	static u8 local_Au8KPDValue[KPD_U8_ROWS_NUM][KPD_U8_COLS_NUM] = KPD_U8_KEYS ;
	if(copy_Pu8ReturenedSwitch != NULL)
    1488:	8e 81       	ldd	r24, Y+6	; 0x06
    148a:	9f 81       	ldd	r25, Y+7	; 0x07
    148c:	00 97       	sbiw	r24, 0x00	; 0
    148e:	09 f4       	brne	.+2      	; 0x1492 <KPD_u8GetSwitch+0x28>
    1490:	6e c0       	rjmp	.+220    	; 0x156e <KPD_u8GetSwitch+0x104>
	{                      
        *copy_Pu8ReturenedSwitch = KPD_U8_NOT_PRESSED;
    1492:	ee 81       	ldd	r30, Y+6	; 0x06
    1494:	ff 81       	ldd	r31, Y+7	; 0x07
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	80 83       	st	Z, r24
		for(u8 local_u8RowsCounter=0 ;local_u8RowsCounter<KPD_U8_ROWS_NUM;local_u8RowsCounter++)
    149a:	1a 82       	std	Y+2, r1	; 0x02
    149c:	63 c0       	rjmp	.+198    	; 0x1564 <KPD_u8GetSwitch+0xfa>
		{
			/*activate each row*/
			DIO_u8SetPinValue(KPD_U8_ROWS_PORT,local_Au8RowsPinArr[local_u8RowsCounter],LOW);
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	fc 01       	movw	r30, r24
    14a6:	ee 50       	subi	r30, 0x0E	; 14
    14a8:	ff 4f       	sbci	r31, 0xFF	; 255
    14aa:	90 81       	ld	r25, Z
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	69 2f       	mov	r22, r25
    14b0:	40 e0       	ldi	r20, 0x00	; 0
    14b2:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
			/*loop for cols pin check*/
			for(u8 local_u8ColsCounter=0 ;local_u8ColsCounter<KPD_U8_COLS_NUM;local_u8ColsCounter++)
    14b6:	19 82       	std	Y+1, r1	; 0x01
    14b8:	3f c0       	rjmp	.+126    	; 0x1538 <KPD_u8GetSwitch+0xce>
			{
				/*check col activate*/
				DIO_u8GetPinValue(KPD_U8_COLS_PORT,local_Au8ColsPinArr[local_u8ColsCounter],&local_u8PinValue);
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 51       	subi	r30, 0x12	; 18
    14c4:	ff 4f       	sbci	r31, 0xFF	; 255
    14c6:	90 81       	ld	r25, Z
    14c8:	9e 01       	movw	r18, r28
    14ca:	2b 5f       	subi	r18, 0xFB	; 251
    14cc:	3f 4f       	sbci	r19, 0xFF	; 255
    14ce:	83 e0       	ldi	r24, 0x03	; 3
    14d0:	69 2f       	mov	r22, r25
    14d2:	a9 01       	movw	r20, r18
    14d4:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_u8GetPinValue>
				if(local_u8PinValue == LOW)
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	88 23       	and	r24, r24
    14dc:	51 f5       	brne	.+84     	; 0x1532 <KPD_u8GetSwitch+0xc8>
				{
					*copy_Pu8ReturenedSwitch = local_Au8KPDValue[local_u8RowsCounter][local_u8ColsCounter];
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	48 2f       	mov	r20, r24
    14e2:	50 e0       	ldi	r21, 0x00	; 0
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	ca 01       	movw	r24, r20
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	82 0f       	add	r24, r18
    14f6:	93 1f       	adc	r25, r19
    14f8:	fc 01       	movw	r30, r24
    14fa:	e2 52       	subi	r30, 0x22	; 34
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	80 81       	ld	r24, Z
    1500:	ee 81       	ldd	r30, Y+6	; 0x06
    1502:	ff 81       	ldd	r31, Y+7	; 0x07
    1504:	80 83       	st	Z, r24
    1506:	0f c0       	rjmp	.+30     	; 0x1526 <KPD_u8GetSwitch+0xbc>
					while(local_u8PinValue == LOW)
					{
						DIO_u8GetPinValue(KPD_U8_COLS_PORT,local_Au8ColsPinArr[local_u8ColsCounter],&local_u8PinValue);
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	88 2f       	mov	r24, r24
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	fc 01       	movw	r30, r24
    1510:	e2 51       	subi	r30, 0x12	; 18
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	90 81       	ld	r25, Z
    1516:	9e 01       	movw	r18, r28
    1518:	2b 5f       	subi	r18, 0xFB	; 251
    151a:	3f 4f       	sbci	r19, 0xFF	; 255
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	69 2f       	mov	r22, r25
    1520:	a9 01       	movw	r20, r18
    1522:	0e 94 63 08 	call	0x10c6	; 0x10c6 <DIO_u8GetPinValue>
				/*check col activate*/
				DIO_u8GetPinValue(KPD_U8_COLS_PORT,local_Au8ColsPinArr[local_u8ColsCounter],&local_u8PinValue);
				if(local_u8PinValue == LOW)
				{
					*copy_Pu8ReturenedSwitch = local_Au8KPDValue[local_u8RowsCounter][local_u8ColsCounter];
					while(local_u8PinValue == LOW)
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	88 23       	and	r24, r24
    152a:	71 f3       	breq	.-36     	; 0x1508 <KPD_u8GetSwitch+0x9e>
					{
						DIO_u8GetPinValue(KPD_U8_COLS_PORT,local_Au8ColsPinArr[local_u8ColsCounter],&local_u8PinValue);
					}
					flag =1 ;
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	8b 83       	std	Y+3, r24	; 0x03
    1530:	07 c0       	rjmp	.+14     	; 0x1540 <KPD_u8GetSwitch+0xd6>
		for(u8 local_u8RowsCounter=0 ;local_u8RowsCounter<KPD_U8_ROWS_NUM;local_u8RowsCounter++)
		{
			/*activate each row*/
			DIO_u8SetPinValue(KPD_U8_ROWS_PORT,local_Au8RowsPinArr[local_u8RowsCounter],LOW);
			/*loop for cols pin check*/
			for(u8 local_u8ColsCounter=0 ;local_u8ColsCounter<KPD_U8_COLS_NUM;local_u8ColsCounter++)
    1532:	89 81       	ldd	r24, Y+1	; 0x01
    1534:	8f 5f       	subi	r24, 0xFF	; 255
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	84 30       	cpi	r24, 0x04	; 4
    153c:	08 f4       	brcc	.+2      	; 0x1540 <KPD_u8GetSwitch+0xd6>
    153e:	bd cf       	rjmp	.-134    	; 0x14ba <KPD_u8GetSwitch+0x50>
					flag =1 ;
					break;
				}
			}
			/*deactivate row*/
			DIO_u8SetPinValue(KPD_U8_ROWS_PORT,local_Au8RowsPinArr[local_u8RowsCounter],HIGH);
    1540:	8a 81       	ldd	r24, Y+2	; 0x02
    1542:	88 2f       	mov	r24, r24
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	fc 01       	movw	r30, r24
    1548:	ee 50       	subi	r30, 0x0E	; 14
    154a:	ff 4f       	sbci	r31, 0xFF	; 255
    154c:	90 81       	ld	r25, Z
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	69 2f       	mov	r22, r25
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
			if(flag ==1)
    1558:	8b 81       	ldd	r24, Y+3	; 0x03
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	49 f0       	breq	.+18     	; 0x1570 <KPD_u8GetSwitch+0x106>
	static u8 local_Au8ColsPinArr[KPD_U8_COLS_NUM] = KPD_U8_COLS_PINS;
	static u8 local_Au8KPDValue[KPD_U8_ROWS_NUM][KPD_U8_COLS_NUM] = KPD_U8_KEYS ;
	if(copy_Pu8ReturenedSwitch != NULL)
	{                      
        *copy_Pu8ReturenedSwitch = KPD_U8_NOT_PRESSED;
		for(u8 local_u8RowsCounter=0 ;local_u8RowsCounter<KPD_U8_ROWS_NUM;local_u8RowsCounter++)
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	8a 83       	std	Y+2, r24	; 0x02
    1564:	8a 81       	ldd	r24, Y+2	; 0x02
    1566:	84 30       	cpi	r24, 0x04	; 4
    1568:	08 f4       	brcc	.+2      	; 0x156c <KPD_u8GetSwitch+0x102>
    156a:	99 cf       	rjmp	.-206    	; 0x149e <KPD_u8GetSwitch+0x34>
    156c:	01 c0       	rjmp	.+2      	; 0x1570 <KPD_u8GetSwitch+0x106>
		
		
	}
	else
	{
		local_u8ReturnStet = STD_TYPES_NOK ;
    156e:	1c 82       	std	Y+4, r1	; 0x04
	}
    return local_u8ReturnStet;
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
	
}
    1572:	27 96       	adiw	r28, 0x07	; 7
    1574:	0f b6       	in	r0, 0x3f	; 63
    1576:	f8 94       	cli
    1578:	de bf       	out	0x3e, r29	; 62
    157a:	0f be       	out	0x3f, r0	; 63
    157c:	cd bf       	out	0x3d, r28	; 61
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <LCD_voidInit>:
#include"LCD_config.h"



void LCD_voidInit       (void)
{
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	c8 56       	subi	r28, 0x68	; 104
    1592:	d0 40       	sbci	r29, 0x00	; 0
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	fe 01       	movw	r30, r28
    15a0:	eb 59       	subi	r30, 0x9B	; 155
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	ac e0       	ldi	r26, 0x0C	; 12
    15aa:	b2 e4       	ldi	r27, 0x42	; 66
    15ac:	80 83       	st	Z, r24
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	a2 83       	std	Z+2, r26	; 0x02
    15b2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b4:	8e 01       	movw	r16, r28
    15b6:	0f 59       	subi	r16, 0x9F	; 159
    15b8:	1f 4f       	sbci	r17, 0xFF	; 255
    15ba:	fe 01       	movw	r30, r28
    15bc:	eb 59       	subi	r30, 0x9B	; 155
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	60 81       	ld	r22, Z
    15c2:	71 81       	ldd	r23, Z+1	; 0x01
    15c4:	82 81       	ldd	r24, Z+2	; 0x02
    15c6:	93 81       	ldd	r25, Z+3	; 0x03
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	4a ef       	ldi	r20, 0xFA	; 250
    15ce:	54 e4       	ldi	r21, 0x44	; 68
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	f8 01       	movw	r30, r16
    15da:	80 83       	st	Z, r24
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	a2 83       	std	Z+2, r26	; 0x02
    15e0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15e2:	fe 01       	movw	r30, r28
    15e4:	ef 59       	subi	r30, 0x9F	; 159
    15e6:	ff 4f       	sbci	r31, 0xFF	; 255
    15e8:	60 81       	ld	r22, Z
    15ea:	71 81       	ldd	r23, Z+1	; 0x01
    15ec:	82 81       	ldd	r24, Z+2	; 0x02
    15ee:	93 81       	ldd	r25, Z+3	; 0x03
    15f0:	20 e0       	ldi	r18, 0x00	; 0
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	40 e8       	ldi	r20, 0x80	; 128
    15f6:	5f e3       	ldi	r21, 0x3F	; 63
    15f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15fc:	88 23       	and	r24, r24
    15fe:	44 f4       	brge	.+16     	; 0x1610 <LCD_voidInit+0x8c>
		__ticks = 1;
    1600:	fe 01       	movw	r30, r28
    1602:	e1 5a       	subi	r30, 0xA1	; 161
    1604:	ff 4f       	sbci	r31, 0xFF	; 255
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
    160e:	64 c0       	rjmp	.+200    	; 0x16d8 <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1610:	fe 01       	movw	r30, r28
    1612:	ef 59       	subi	r30, 0x9F	; 159
    1614:	ff 4f       	sbci	r31, 0xFF	; 255
    1616:	60 81       	ld	r22, Z
    1618:	71 81       	ldd	r23, Z+1	; 0x01
    161a:	82 81       	ldd	r24, Z+2	; 0x02
    161c:	93 81       	ldd	r25, Z+3	; 0x03
    161e:	20 e0       	ldi	r18, 0x00	; 0
    1620:	3f ef       	ldi	r19, 0xFF	; 255
    1622:	4f e7       	ldi	r20, 0x7F	; 127
    1624:	57 e4       	ldi	r21, 0x47	; 71
    1626:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    162a:	18 16       	cp	r1, r24
    162c:	0c f0       	brlt	.+2      	; 0x1630 <LCD_voidInit+0xac>
    162e:	43 c0       	rjmp	.+134    	; 0x16b6 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1630:	fe 01       	movw	r30, r28
    1632:	eb 59       	subi	r30, 0x9B	; 155
    1634:	ff 4f       	sbci	r31, 0xFF	; 255
    1636:	60 81       	ld	r22, Z
    1638:	71 81       	ldd	r23, Z+1	; 0x01
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	8e 01       	movw	r16, r28
    1650:	01 5a       	subi	r16, 0xA1	; 161
    1652:	1f 4f       	sbci	r17, 0xFF	; 255
    1654:	bc 01       	movw	r22, r24
    1656:	cd 01       	movw	r24, r26
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	f8 01       	movw	r30, r16
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	1f c0       	rjmp	.+62     	; 0x16a6 <LCD_voidInit+0x122>
    1668:	fe 01       	movw	r30, r28
    166a:	e3 5a       	subi	r30, 0xA3	; 163
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	88 ec       	ldi	r24, 0xC8	; 200
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	91 83       	std	Z+1, r25	; 0x01
    1674:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1676:	fe 01       	movw	r30, r28
    1678:	e3 5a       	subi	r30, 0xA3	; 163
    167a:	ff 4f       	sbci	r31, 0xFF	; 255
    167c:	80 81       	ld	r24, Z
    167e:	91 81       	ldd	r25, Z+1	; 0x01
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <LCD_voidInit+0xfc>
    1684:	fe 01       	movw	r30, r28
    1686:	e3 5a       	subi	r30, 0xA3	; 163
    1688:	ff 4f       	sbci	r31, 0xFF	; 255
    168a:	91 83       	std	Z+1, r25	; 0x01
    168c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    168e:	de 01       	movw	r26, r28
    1690:	a1 5a       	subi	r26, 0xA1	; 161
    1692:	bf 4f       	sbci	r27, 0xFF	; 255
    1694:	fe 01       	movw	r30, r28
    1696:	e1 5a       	subi	r30, 0xA1	; 161
    1698:	ff 4f       	sbci	r31, 0xFF	; 255
    169a:	80 81       	ld	r24, Z
    169c:	91 81       	ldd	r25, Z+1	; 0x01
    169e:	01 97       	sbiw	r24, 0x01	; 1
    16a0:	11 96       	adiw	r26, 0x01	; 1
    16a2:	9c 93       	st	X, r25
    16a4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16a6:	fe 01       	movw	r30, r28
    16a8:	e1 5a       	subi	r30, 0xA1	; 161
    16aa:	ff 4f       	sbci	r31, 0xFF	; 255
    16ac:	80 81       	ld	r24, Z
    16ae:	91 81       	ldd	r25, Z+1	; 0x01
    16b0:	00 97       	sbiw	r24, 0x00	; 0
    16b2:	d1 f6       	brne	.-76     	; 0x1668 <LCD_voidInit+0xe4>
    16b4:	27 c0       	rjmp	.+78     	; 0x1704 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16b6:	8e 01       	movw	r16, r28
    16b8:	01 5a       	subi	r16, 0xA1	; 161
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	ef 59       	subi	r30, 0x9F	; 159
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16ce:	dc 01       	movw	r26, r24
    16d0:	cb 01       	movw	r24, r22
    16d2:	f8 01       	movw	r30, r16
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	de 01       	movw	r26, r28
    16da:	a5 5a       	subi	r26, 0xA5	; 165
    16dc:	bf 4f       	sbci	r27, 0xFF	; 255
    16de:	fe 01       	movw	r30, r28
    16e0:	e1 5a       	subi	r30, 0xA1	; 161
    16e2:	ff 4f       	sbci	r31, 0xFF	; 255
    16e4:	80 81       	ld	r24, Z
    16e6:	91 81       	ldd	r25, Z+1	; 0x01
    16e8:	8d 93       	st	X+, r24
    16ea:	9c 93       	st	X, r25
    16ec:	fe 01       	movw	r30, r28
    16ee:	e5 5a       	subi	r30, 0xA5	; 165
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_voidInit+0x172>
    16fa:	fe 01       	movw	r30, r28
    16fc:	e5 5a       	subi	r30, 0xA5	; 165
    16fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1700:	91 83       	std	Z+1, r25	; 0x01
    1702:	80 83       	st	Z, r24
#if  LCD_U8_MODE== LCD_U8_8_BIT_MODE
	/*send cmnd */
	LCD_voidSendCmnd(0b00111000);
#elif LCD_U8_MODE== LCD_U8_4_BIT_MODE
	
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN ,LOW);
    1704:	80 e0       	ldi	r24, 0x00	; 0
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	40 e0       	ldi	r20, 0x00	; 0
    170a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN ,LOW);
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	Private_voidWriteHalfPort(0b0010);
    1718:	82 e0       	ldi	r24, 0x02	; 2
    171a:	0e 94 38 13 	call	0x2670	; 0x2670 <Private_voidWriteHalfPort>
	/*enable pulse*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,HIGH);
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	62 e0       	ldi	r22, 0x02	; 2
    1722:	41 e0       	ldi	r20, 0x01	; 1
    1724:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    1728:	fe 01       	movw	r30, r28
    172a:	e9 5a       	subi	r30, 0xA9	; 169
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	a0 e8       	ldi	r26, 0x80	; 128
    1734:	bf e3       	ldi	r27, 0x3F	; 63
    1736:	80 83       	st	Z, r24
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	a2 83       	std	Z+2, r26	; 0x02
    173c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173e:	8e 01       	movw	r16, r28
    1740:	0d 5a       	subi	r16, 0xAD	; 173
    1742:	1f 4f       	sbci	r17, 0xFF	; 255
    1744:	fe 01       	movw	r30, r28
    1746:	e9 5a       	subi	r30, 0xA9	; 169
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	4a ef       	ldi	r20, 0xFA	; 250
    1758:	54 e4       	ldi	r21, 0x44	; 68
    175a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	f8 01       	movw	r30, r16
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    176c:	fe 01       	movw	r30, r28
    176e:	ed 5a       	subi	r30, 0xAD	; 173
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	82 81       	ldd	r24, Z+2	; 0x02
    1778:	93 81       	ldd	r25, Z+3	; 0x03
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	40 e8       	ldi	r20, 0x80	; 128
    1780:	5f e3       	ldi	r21, 0x3F	; 63
    1782:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1786:	88 23       	and	r24, r24
    1788:	44 f4       	brge	.+16     	; 0x179a <LCD_voidInit+0x216>
		__ticks = 1;
    178a:	fe 01       	movw	r30, r28
    178c:	ef 5a       	subi	r30, 0xAF	; 175
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	80 83       	st	Z, r24
    1798:	64 c0       	rjmp	.+200    	; 0x1862 <LCD_voidInit+0x2de>
	else if (__tmp > 65535)
    179a:	fe 01       	movw	r30, r28
    179c:	ed 5a       	subi	r30, 0xAD	; 173
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	4f e7       	ldi	r20, 0x7F	; 127
    17ae:	57 e4       	ldi	r21, 0x47	; 71
    17b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17b4:	18 16       	cp	r1, r24
    17b6:	0c f0       	brlt	.+2      	; 0x17ba <LCD_voidInit+0x236>
    17b8:	43 c0       	rjmp	.+134    	; 0x1840 <LCD_voidInit+0x2bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ba:	fe 01       	movw	r30, r28
    17bc:	e9 5a       	subi	r30, 0xA9	; 169
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	60 81       	ld	r22, Z
    17c2:	71 81       	ldd	r23, Z+1	; 0x01
    17c4:	82 81       	ldd	r24, Z+2	; 0x02
    17c6:	93 81       	ldd	r25, Z+3	; 0x03
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	40 e2       	ldi	r20, 0x20	; 32
    17ce:	51 e4       	ldi	r21, 0x41	; 65
    17d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	8e 01       	movw	r16, r28
    17da:	0f 5a       	subi	r16, 0xAF	; 175
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	bc 01       	movw	r22, r24
    17e0:	cd 01       	movw	r24, r26
    17e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	f8 01       	movw	r30, r16
    17ec:	91 83       	std	Z+1, r25	; 0x01
    17ee:	80 83       	st	Z, r24
    17f0:	1f c0       	rjmp	.+62     	; 0x1830 <LCD_voidInit+0x2ac>
    17f2:	fe 01       	movw	r30, r28
    17f4:	e1 5b       	subi	r30, 0xB1	; 177
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	88 ec       	ldi	r24, 0xC8	; 200
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	fe 01       	movw	r30, r28
    1802:	e1 5b       	subi	r30, 0xB1	; 177
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 81       	ld	r24, Z
    1808:	91 81       	ldd	r25, Z+1	; 0x01
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	f1 f7       	brne	.-4      	; 0x180a <LCD_voidInit+0x286>
    180e:	fe 01       	movw	r30, r28
    1810:	e1 5b       	subi	r30, 0xB1	; 177
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	91 83       	std	Z+1, r25	; 0x01
    1816:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1818:	de 01       	movw	r26, r28
    181a:	af 5a       	subi	r26, 0xAF	; 175
    181c:	bf 4f       	sbci	r27, 0xFF	; 255
    181e:	fe 01       	movw	r30, r28
    1820:	ef 5a       	subi	r30, 0xAF	; 175
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	11 96       	adiw	r26, 0x01	; 1
    182c:	9c 93       	st	X, r25
    182e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1830:	fe 01       	movw	r30, r28
    1832:	ef 5a       	subi	r30, 0xAF	; 175
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	80 81       	ld	r24, Z
    1838:	91 81       	ldd	r25, Z+1	; 0x01
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	d1 f6       	brne	.-76     	; 0x17f2 <LCD_voidInit+0x26e>
    183e:	27 c0       	rjmp	.+78     	; 0x188e <LCD_voidInit+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1840:	8e 01       	movw	r16, r28
    1842:	0f 5a       	subi	r16, 0xAF	; 175
    1844:	1f 4f       	sbci	r17, 0xFF	; 255
    1846:	fe 01       	movw	r30, r28
    1848:	ed 5a       	subi	r30, 0xAD	; 173
    184a:	ff 4f       	sbci	r31, 0xFF	; 255
    184c:	60 81       	ld	r22, Z
    184e:	71 81       	ldd	r23, Z+1	; 0x01
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	93 81       	ldd	r25, Z+3	; 0x03
    1854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	f8 01       	movw	r30, r16
    185e:	91 83       	std	Z+1, r25	; 0x01
    1860:	80 83       	st	Z, r24
    1862:	de 01       	movw	r26, r28
    1864:	a3 5b       	subi	r26, 0xB3	; 179
    1866:	bf 4f       	sbci	r27, 0xFF	; 255
    1868:	fe 01       	movw	r30, r28
    186a:	ef 5a       	subi	r30, 0xAF	; 175
    186c:	ff 4f       	sbci	r31, 0xFF	; 255
    186e:	80 81       	ld	r24, Z
    1870:	91 81       	ldd	r25, Z+1	; 0x01
    1872:	8d 93       	st	X+, r24
    1874:	9c 93       	st	X, r25
    1876:	fe 01       	movw	r30, r28
    1878:	e3 5b       	subi	r30, 0xB3	; 179
    187a:	ff 4f       	sbci	r31, 0xFF	; 255
    187c:	80 81       	ld	r24, Z
    187e:	91 81       	ldd	r25, Z+1	; 0x01
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <LCD_voidInit+0x2fc>
    1884:	fe 01       	movw	r30, r28
    1886:	e3 5b       	subi	r30, 0xB3	; 179
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	91 83       	std	Z+1, r25	; 0x01
    188c:	80 83       	st	Z, r24
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,LOW);
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	62 e0       	ldi	r22, 0x02	; 2
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    1898:	fe 01       	movw	r30, r28
    189a:	e7 5b       	subi	r30, 0xB7	; 183
    189c:	ff 4f       	sbci	r31, 0xFF	; 255
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	a0 e8       	ldi	r26, 0x80	; 128
    18a4:	bf e3       	ldi	r27, 0x3F	; 63
    18a6:	80 83       	st	Z, r24
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	a2 83       	std	Z+2, r26	; 0x02
    18ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ae:	8e 01       	movw	r16, r28
    18b0:	0b 5b       	subi	r16, 0xBB	; 187
    18b2:	1f 4f       	sbci	r17, 0xFF	; 255
    18b4:	fe 01       	movw	r30, r28
    18b6:	e7 5b       	subi	r30, 0xB7	; 183
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	60 81       	ld	r22, Z
    18bc:	71 81       	ldd	r23, Z+1	; 0x01
    18be:	82 81       	ldd	r24, Z+2	; 0x02
    18c0:	93 81       	ldd	r25, Z+3	; 0x03
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	4a ef       	ldi	r20, 0xFA	; 250
    18c8:	54 e4       	ldi	r21, 0x44	; 68
    18ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	f8 01       	movw	r30, r16
    18d4:	80 83       	st	Z, r24
    18d6:	91 83       	std	Z+1, r25	; 0x01
    18d8:	a2 83       	std	Z+2, r26	; 0x02
    18da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18dc:	fe 01       	movw	r30, r28
    18de:	eb 5b       	subi	r30, 0xBB	; 187
    18e0:	ff 4f       	sbci	r31, 0xFF	; 255
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e8       	ldi	r20, 0x80	; 128
    18f0:	5f e3       	ldi	r21, 0x3F	; 63
    18f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f6:	88 23       	and	r24, r24
    18f8:	44 f4       	brge	.+16     	; 0x190a <LCD_voidInit+0x386>
		__ticks = 1;
    18fa:	fe 01       	movw	r30, r28
    18fc:	ed 5b       	subi	r30, 0xBD	; 189
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	91 83       	std	Z+1, r25	; 0x01
    1906:	80 83       	st	Z, r24
    1908:	64 c0       	rjmp	.+200    	; 0x19d2 <LCD_voidInit+0x44e>
	else if (__tmp > 65535)
    190a:	fe 01       	movw	r30, r28
    190c:	eb 5b       	subi	r30, 0xBB	; 187
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	60 81       	ld	r22, Z
    1912:	71 81       	ldd	r23, Z+1	; 0x01
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	3f ef       	ldi	r19, 0xFF	; 255
    191c:	4f e7       	ldi	r20, 0x7F	; 127
    191e:	57 e4       	ldi	r21, 0x47	; 71
    1920:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1924:	18 16       	cp	r1, r24
    1926:	0c f0       	brlt	.+2      	; 0x192a <LCD_voidInit+0x3a6>
    1928:	43 c0       	rjmp	.+134    	; 0x19b0 <LCD_voidInit+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192a:	fe 01       	movw	r30, r28
    192c:	e7 5b       	subi	r30, 0xB7	; 183
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	40 e2       	ldi	r20, 0x20	; 32
    193e:	51 e4       	ldi	r21, 0x41	; 65
    1940:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	8e 01       	movw	r16, r28
    194a:	0d 5b       	subi	r16, 0xBD	; 189
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	bc 01       	movw	r22, r24
    1950:	cd 01       	movw	r24, r26
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	f8 01       	movw	r30, r16
    195c:	91 83       	std	Z+1, r25	; 0x01
    195e:	80 83       	st	Z, r24
    1960:	1f c0       	rjmp	.+62     	; 0x19a0 <LCD_voidInit+0x41c>
    1962:	fe 01       	movw	r30, r28
    1964:	ef 5b       	subi	r30, 0xBF	; 191
    1966:	ff 4f       	sbci	r31, 0xFF	; 255
    1968:	88 ec       	ldi	r24, 0xC8	; 200
    196a:	90 e0       	ldi	r25, 0x00	; 0
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
    1970:	fe 01       	movw	r30, r28
    1972:	ef 5b       	subi	r30, 0xBF	; 191
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	80 81       	ld	r24, Z
    1978:	91 81       	ldd	r25, Z+1	; 0x01
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	f1 f7       	brne	.-4      	; 0x197a <LCD_voidInit+0x3f6>
    197e:	fe 01       	movw	r30, r28
    1980:	ef 5b       	subi	r30, 0xBF	; 191
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	91 83       	std	Z+1, r25	; 0x01
    1986:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	de 01       	movw	r26, r28
    198a:	ad 5b       	subi	r26, 0xBD	; 189
    198c:	bf 4f       	sbci	r27, 0xFF	; 255
    198e:	fe 01       	movw	r30, r28
    1990:	ed 5b       	subi	r30, 0xBD	; 189
    1992:	ff 4f       	sbci	r31, 0xFF	; 255
    1994:	80 81       	ld	r24, Z
    1996:	91 81       	ldd	r25, Z+1	; 0x01
    1998:	01 97       	sbiw	r24, 0x01	; 1
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	9c 93       	st	X, r25
    199e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a0:	fe 01       	movw	r30, r28
    19a2:	ed 5b       	subi	r30, 0xBD	; 189
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	d1 f6       	brne	.-76     	; 0x1962 <LCD_voidInit+0x3de>
    19ae:	24 c0       	rjmp	.+72     	; 0x19f8 <LCD_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b0:	8e 01       	movw	r16, r28
    19b2:	0d 5b       	subi	r16, 0xBD	; 189
    19b4:	1f 4f       	sbci	r17, 0xFF	; 255
    19b6:	fe 01       	movw	r30, r28
    19b8:	eb 5b       	subi	r30, 0xBB	; 187
    19ba:	ff 4f       	sbci	r31, 0xFF	; 255
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	f8 01       	movw	r30, r16
    19ce:	91 83       	std	Z+1, r25	; 0x01
    19d0:	80 83       	st	Z, r24
    19d2:	fe 01       	movw	r30, r28
    19d4:	ed 5b       	subi	r30, 0xBD	; 189
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	fe 01       	movw	r30, r28
    19de:	ff 96       	adiw	r30, 0x3f	; 63
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
    19e4:	fe 01       	movw	r30, r28
    19e6:	ff 96       	adiw	r30, 0x3f	; 63
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <LCD_voidInit+0x468>
    19f0:	fe 01       	movw	r30, r28
    19f2:	ff 96       	adiw	r30, 0x3f	; 63
    19f4:	91 83       	std	Z+1, r25	; 0x01
    19f6:	80 83       	st	Z, r24
	_delay_ms(1);	
	LCD_voidSendCmnd(0b00101000);
    19f8:	88 e2       	ldi	r24, 0x28	; 40
    19fa:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_voidSendCmnd>
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a4 e3       	ldi	r26, 0x34	; 52
    1a04:	b2 e4       	ldi	r27, 0x42	; 66
    1a06:	8b af       	std	Y+59, r24	; 0x3b
    1a08:	9c af       	std	Y+60, r25	; 0x3c
    1a0a:	ad af       	std	Y+61, r26	; 0x3d
    1a0c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a0e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a10:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a12:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a14:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a16:	2b ea       	ldi	r18, 0xAB	; 171
    1a18:	3a ea       	ldi	r19, 0xAA	; 170
    1a1a:	4a e2       	ldi	r20, 0x2A	; 42
    1a1c:	50 e4       	ldi	r21, 0x40	; 64
    1a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a22:	dc 01       	movw	r26, r24
    1a24:	cb 01       	movw	r24, r22
    1a26:	8f ab       	std	Y+55, r24	; 0x37
    1a28:	98 af       	std	Y+56, r25	; 0x38
    1a2a:	a9 af       	std	Y+57, r26	; 0x39
    1a2c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a2e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a30:	78 ad       	ldd	r23, Y+56	; 0x38
    1a32:	89 ad       	ldd	r24, Y+57	; 0x39
    1a34:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a36:	20 e0       	ldi	r18, 0x00	; 0
    1a38:	30 e0       	ldi	r19, 0x00	; 0
    1a3a:	40 e8       	ldi	r20, 0x80	; 128
    1a3c:	5f e3       	ldi	r21, 0x3F	; 63
    1a3e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a42:	88 23       	and	r24, r24
    1a44:	1c f4       	brge	.+6      	; 0x1a4c <LCD_voidInit+0x4c8>
		__ticks = 1;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	8e ab       	std	Y+54, r24	; 0x36
    1a4a:	91 c0       	rjmp	.+290    	; 0x1b6e <LCD_voidInit+0x5ea>
	else if (__tmp > 255)
    1a4c:	6f a9       	ldd	r22, Y+55	; 0x37
    1a4e:	78 ad       	ldd	r23, Y+56	; 0x38
    1a50:	89 ad       	ldd	r24, Y+57	; 0x39
    1a52:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a54:	20 e0       	ldi	r18, 0x00	; 0
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	4f e7       	ldi	r20, 0x7F	; 127
    1a5a:	53 e4       	ldi	r21, 0x43	; 67
    1a5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a60:	18 16       	cp	r1, r24
    1a62:	0c f0       	brlt	.+2      	; 0x1a66 <LCD_voidInit+0x4e2>
    1a64:	7b c0       	rjmp	.+246    	; 0x1b5c <LCD_voidInit+0x5d8>
	{
		_delay_ms(__us / 1000.0);
    1a66:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a68:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	4a e7       	ldi	r20, 0x7A	; 122
    1a74:	54 e4       	ldi	r21, 0x44	; 68
    1a76:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8a ab       	std	Y+50, r24	; 0x32
    1a80:	9b ab       	std	Y+51, r25	; 0x33
    1a82:	ac ab       	std	Y+52, r26	; 0x34
    1a84:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6a a9       	ldd	r22, Y+50	; 0x32
    1a88:	7b a9       	ldd	r23, Y+51	; 0x33
    1a8a:	8c a9       	ldd	r24, Y+52	; 0x34
    1a8c:	9d a9       	ldd	r25, Y+53	; 0x35
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a ef       	ldi	r20, 0xFA	; 250
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8e a7       	std	Y+46, r24	; 0x2e
    1aa0:	9f a7       	std	Y+47, r25	; 0x2f
    1aa2:	a8 ab       	std	Y+48, r26	; 0x30
    1aa4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1aa6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aa8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aaa:	88 a9       	ldd	r24, Y+48	; 0x30
    1aac:	99 a9       	ldd	r25, Y+49	; 0x31
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <LCD_voidInit+0x544>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9d a7       	std	Y+45, r25	; 0x2d
    1ac4:	8c a7       	std	Y+44, r24	; 0x2c
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <LCD_voidInit+0x5c2>
	else if (__tmp > 65535)
    1ac8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aca:	7f a5       	ldd	r23, Y+47	; 0x2f
    1acc:	88 a9       	ldd	r24, Y+48	; 0x30
    1ace:	99 a9       	ldd	r25, Y+49	; 0x31
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <LCD_voidInit+0x5ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6a a9       	ldd	r22, Y+50	; 0x32
    1ae2:	7b a9       	ldd	r23, Y+51	; 0x33
    1ae4:	8c a9       	ldd	r24, Y+52	; 0x34
    1ae6:	9d a9       	ldd	r25, Y+53	; 0x35
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9d a7       	std	Y+45, r25	; 0x2d
    1b06:	8c a7       	std	Y+44, r24	; 0x2c
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <LCD_voidInit+0x5a4>
    1b0a:	88 ec       	ldi	r24, 0xC8	; 200
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9b a7       	std	Y+43, r25	; 0x2b
    1b10:	8a a7       	std	Y+42, r24	; 0x2a
    1b12:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b14:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_voidInit+0x592>
    1b1a:	9b a7       	std	Y+43, r25	; 0x2b
    1b1c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b20:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9d a7       	std	Y+45, r25	; 0x2d
    1b26:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b2a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <LCD_voidInit+0x586>
    1b30:	24 c0       	rjmp	.+72     	; 0x1b7a <LCD_voidInit+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b34:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b36:	88 a9       	ldd	r24, Y+48	; 0x30
    1b38:	99 a9       	ldd	r25, Y+49	; 0x31
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9d a7       	std	Y+45, r25	; 0x2d
    1b44:	8c a7       	std	Y+44, r24	; 0x2c
    1b46:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b48:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b4a:	99 a7       	std	Y+41, r25	; 0x29
    1b4c:	88 a7       	std	Y+40, r24	; 0x28
    1b4e:	88 a5       	ldd	r24, Y+40	; 0x28
    1b50:	99 a5       	ldd	r25, Y+41	; 0x29
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_voidInit+0x5ce>
    1b56:	99 a7       	std	Y+41, r25	; 0x29
    1b58:	88 a7       	std	Y+40, r24	; 0x28
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <LCD_voidInit+0x5f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b5c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b5e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b60:	89 ad       	ldd	r24, Y+57	; 0x39
    1b62:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	8e ab       	std	Y+54, r24	; 0x36
    1b6e:	8e a9       	ldd	r24, Y+54	; 0x36
    1b70:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b72:	8f a1       	ldd	r24, Y+39	; 0x27
    1b74:	8a 95       	dec	r24
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <LCD_voidInit+0x5f0>
    1b78:	8f a3       	std	Y+39, r24	; 0x27
	
#endif
	_delay_us(45);
	/*display on /off control*/
	LCD_voidSendCmnd(0b00001111);/*display on , blink on, cursor on */
    1b7a:	8f e0       	ldi	r24, 0x0F	; 15
    1b7c:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_voidSendCmnd>
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	a4 e3       	ldi	r26, 0x34	; 52
    1b86:	b2 e4       	ldi	r27, 0x42	; 66
    1b88:	8b a3       	std	Y+35, r24	; 0x23
    1b8a:	9c a3       	std	Y+36, r25	; 0x24
    1b8c:	ad a3       	std	Y+37, r26	; 0x25
    1b8e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b90:	6b a1       	ldd	r22, Y+35	; 0x23
    1b92:	7c a1       	ldd	r23, Y+36	; 0x24
    1b94:	8d a1       	ldd	r24, Y+37	; 0x25
    1b96:	9e a1       	ldd	r25, Y+38	; 0x26
    1b98:	2b ea       	ldi	r18, 0xAB	; 171
    1b9a:	3a ea       	ldi	r19, 0xAA	; 170
    1b9c:	4a e2       	ldi	r20, 0x2A	; 42
    1b9e:	50 e4       	ldi	r21, 0x40	; 64
    1ba0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	8f 8f       	std	Y+31, r24	; 0x1f
    1baa:	98 a3       	std	Y+32, r25	; 0x20
    1bac:	a9 a3       	std	Y+33, r26	; 0x21
    1bae:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bb0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bb2:	78 a1       	ldd	r23, Y+32	; 0x20
    1bb4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bb6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e8       	ldi	r20, 0x80	; 128
    1bbe:	5f e3       	ldi	r21, 0x3F	; 63
    1bc0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bc4:	88 23       	and	r24, r24
    1bc6:	1c f4       	brge	.+6      	; 0x1bce <LCD_voidInit+0x64a>
		__ticks = 1;
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	8e 8f       	std	Y+30, r24	; 0x1e
    1bcc:	91 c0       	rjmp	.+290    	; 0x1cf0 <LCD_voidInit+0x76c>
	else if (__tmp > 255)
    1bce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bd0:	78 a1       	ldd	r23, Y+32	; 0x20
    1bd2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	53 e4       	ldi	r21, 0x43	; 67
    1bde:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	0c f0       	brlt	.+2      	; 0x1be8 <LCD_voidInit+0x664>
    1be6:	7b c0       	rjmp	.+246    	; 0x1cde <LCD_voidInit+0x75a>
	{
		_delay_ms(__us / 1000.0);
    1be8:	6b a1       	ldd	r22, Y+35	; 0x23
    1bea:	7c a1       	ldd	r23, Y+36	; 0x24
    1bec:	8d a1       	ldd	r24, Y+37	; 0x25
    1bee:	9e a1       	ldd	r25, Y+38	; 0x26
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	4a e7       	ldi	r20, 0x7A	; 122
    1bf6:	54 e4       	ldi	r21, 0x44	; 68
    1bf8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	8a 8f       	std	Y+26, r24	; 0x1a
    1c02:	9b 8f       	std	Y+27, r25	; 0x1b
    1c04:	ac 8f       	std	Y+28, r26	; 0x1c
    1c06:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c08:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c0a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c0e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a ef       	ldi	r20, 0xFA	; 250
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8e 8b       	std	Y+22, r24	; 0x16
    1c22:	9f 8b       	std	Y+23, r25	; 0x17
    1c24:	a8 8f       	std	Y+24, r26	; 0x18
    1c26:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c28:	6e 89       	ldd	r22, Y+22	; 0x16
    1c2a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c2e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 e8       	ldi	r20, 0x80	; 128
    1c36:	5f e3       	ldi	r21, 0x3F	; 63
    1c38:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c3c:	88 23       	and	r24, r24
    1c3e:	2c f4       	brge	.+10     	; 0x1c4a <LCD_voidInit+0x6c6>
		__ticks = 1;
    1c40:	81 e0       	ldi	r24, 0x01	; 1
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9d 8b       	std	Y+21, r25	; 0x15
    1c46:	8c 8b       	std	Y+20, r24	; 0x14
    1c48:	3f c0       	rjmp	.+126    	; 0x1cc8 <LCD_voidInit+0x744>
	else if (__tmp > 65535)
    1c4a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c4c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c4e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c50:	99 8d       	ldd	r25, Y+25	; 0x19
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	3f ef       	ldi	r19, 0xFF	; 255
    1c56:	4f e7       	ldi	r20, 0x7F	; 127
    1c58:	57 e4       	ldi	r21, 0x47	; 71
    1c5a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c5e:	18 16       	cp	r1, r24
    1c60:	4c f5       	brge	.+82     	; 0x1cb4 <LCD_voidInit+0x730>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c62:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c64:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c66:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c68:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c6a:	20 e0       	ldi	r18, 0x00	; 0
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	40 e2       	ldi	r20, 0x20	; 32
    1c70:	51 e4       	ldi	r21, 0x41	; 65
    1c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c76:	dc 01       	movw	r26, r24
    1c78:	cb 01       	movw	r24, r22
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	cd 01       	movw	r24, r26
    1c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	9d 8b       	std	Y+21, r25	; 0x15
    1c88:	8c 8b       	std	Y+20, r24	; 0x14
    1c8a:	0f c0       	rjmp	.+30     	; 0x1caa <LCD_voidInit+0x726>
    1c8c:	88 ec       	ldi	r24, 0xC8	; 200
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	9b 8b       	std	Y+19, r25	; 0x13
    1c92:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c94:	8a 89       	ldd	r24, Y+18	; 0x12
    1c96:	9b 89       	ldd	r25, Y+19	; 0x13
    1c98:	01 97       	sbiw	r24, 0x01	; 1
    1c9a:	f1 f7       	brne	.-4      	; 0x1c98 <LCD_voidInit+0x714>
    1c9c:	9b 8b       	std	Y+19, r25	; 0x13
    1c9e:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca0:	8c 89       	ldd	r24, Y+20	; 0x14
    1ca2:	9d 89       	ldd	r25, Y+21	; 0x15
    1ca4:	01 97       	sbiw	r24, 0x01	; 1
    1ca6:	9d 8b       	std	Y+21, r25	; 0x15
    1ca8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1caa:	8c 89       	ldd	r24, Y+20	; 0x14
    1cac:	9d 89       	ldd	r25, Y+21	; 0x15
    1cae:	00 97       	sbiw	r24, 0x00	; 0
    1cb0:	69 f7       	brne	.-38     	; 0x1c8c <LCD_voidInit+0x708>
    1cb2:	24 c0       	rjmp	.+72     	; 0x1cfc <LCD_voidInit+0x778>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb4:	6e 89       	ldd	r22, Y+22	; 0x16
    1cb6:	7f 89       	ldd	r23, Y+23	; 0x17
    1cb8:	88 8d       	ldd	r24, Y+24	; 0x18
    1cba:	99 8d       	ldd	r25, Y+25	; 0x19
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	9d 8b       	std	Y+21, r25	; 0x15
    1cc6:	8c 8b       	std	Y+20, r24	; 0x14
    1cc8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cca:	9d 89       	ldd	r25, Y+21	; 0x15
    1ccc:	99 8b       	std	Y+17, r25	; 0x11
    1cce:	88 8b       	std	Y+16, r24	; 0x10
    1cd0:	88 89       	ldd	r24, Y+16	; 0x10
    1cd2:	99 89       	ldd	r25, Y+17	; 0x11
    1cd4:	01 97       	sbiw	r24, 0x01	; 1
    1cd6:	f1 f7       	brne	.-4      	; 0x1cd4 <LCD_voidInit+0x750>
    1cd8:	99 8b       	std	Y+17, r25	; 0x11
    1cda:	88 8b       	std	Y+16, r24	; 0x10
    1cdc:	0f c0       	rjmp	.+30     	; 0x1cfc <LCD_voidInit+0x778>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cde:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ce0:	78 a1       	ldd	r23, Y+32	; 0x20
    1ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	8e 8f       	std	Y+30, r24	; 0x1e
    1cf0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1cf2:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1cf6:	8a 95       	dec	r24
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_voidInit+0x772>
    1cfa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(45);
	LCD_voidSendCmnd(0b00000001);/*clear display*/
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_voidSendCmnd>
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	b0 e4       	ldi	r27, 0x40	; 64
    1d0a:	8b 87       	std	Y+11, r24	; 0x0b
    1d0c:	9c 87       	std	Y+12, r25	; 0x0c
    1d0e:	ad 87       	std	Y+13, r26	; 0x0d
    1d10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	4a ef       	ldi	r20, 0xFA	; 250
    1d20:	54 e4       	ldi	r21, 0x44	; 68
    1d22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	8f 83       	std	Y+7, r24	; 0x07
    1d2c:	98 87       	std	Y+8, r25	; 0x08
    1d2e:	a9 87       	std	Y+9, r26	; 0x09
    1d30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d32:	6f 81       	ldd	r22, Y+7	; 0x07
    1d34:	78 85       	ldd	r23, Y+8	; 0x08
    1d36:	89 85       	ldd	r24, Y+9	; 0x09
    1d38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	40 e8       	ldi	r20, 0x80	; 128
    1d40:	5f e3       	ldi	r21, 0x3F	; 63
    1d42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d46:	88 23       	and	r24, r24
    1d48:	2c f4       	brge	.+10     	; 0x1d54 <LCD_voidInit+0x7d0>
		__ticks = 1;
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	3f c0       	rjmp	.+126    	; 0x1dd2 <LCD_voidInit+0x84e>
	else if (__tmp > 65535)
    1d54:	6f 81       	ldd	r22, Y+7	; 0x07
    1d56:	78 85       	ldd	r23, Y+8	; 0x08
    1d58:	89 85       	ldd	r24, Y+9	; 0x09
    1d5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	3f ef       	ldi	r19, 0xFF	; 255
    1d60:	4f e7       	ldi	r20, 0x7F	; 127
    1d62:	57 e4       	ldi	r21, 0x47	; 71
    1d64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d68:	18 16       	cp	r1, r24
    1d6a:	4c f5       	brge	.+82     	; 0x1dbe <LCD_voidInit+0x83a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	bc 01       	movw	r22, r24
    1d86:	cd 01       	movw	r24, r26
    1d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9e 83       	std	Y+6, r25	; 0x06
    1d92:	8d 83       	std	Y+5, r24	; 0x05
    1d94:	0f c0       	rjmp	.+30     	; 0x1db4 <LCD_voidInit+0x830>
    1d96:	88 ec       	ldi	r24, 0xC8	; 200
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	9c 83       	std	Y+4, r25	; 0x04
    1d9c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_voidInit+0x81e>
    1da6:	9c 83       	std	Y+4, r25	; 0x04
    1da8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1daa:	8d 81       	ldd	r24, Y+5	; 0x05
    1dac:	9e 81       	ldd	r25, Y+6	; 0x06
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db4:	8d 81       	ldd	r24, Y+5	; 0x05
    1db6:	9e 81       	ldd	r25, Y+6	; 0x06
    1db8:	00 97       	sbiw	r24, 0x00	; 0
    1dba:	69 f7       	brne	.-38     	; 0x1d96 <LCD_voidInit+0x812>
    1dbc:	14 c0       	rjmp	.+40     	; 0x1de6 <LCD_voidInit+0x862>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1dc0:	78 85       	ldd	r23, Y+8	; 0x08
    1dc2:	89 85       	ldd	r24, Y+9	; 0x09
    1dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	9e 83       	std	Y+6, r25	; 0x06
    1dd0:	8d 83       	std	Y+5, r24	; 0x05
    1dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd6:	9a 83       	std	Y+2, r25	; 0x02
    1dd8:	89 83       	std	Y+1, r24	; 0x01
    1dda:	89 81       	ldd	r24, Y+1	; 0x01
    1ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_voidInit+0x85a>
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	/*entry mode set*/
	LCD_voidSendCmnd(0b00000110);
    1de6:	86 e0       	ldi	r24, 0x06	; 6
    1de8:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_voidSendCmnd>

}
    1dec:	c8 59       	subi	r28, 0x98	; 152
    1dee:	df 4f       	sbci	r29, 0xFF	; 255
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	08 95       	ret

00001e04 <LCD_voidSendCmnd>:

void LCD_voidSendCmnd       (u8 copy_u8Cmnd)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	e9 97       	sbiw	r28, 0x39	; 57
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,LOW);
	_delay_ms(1);	
#elif LCD_U8_MODE== LCD_U8_4_BIT_MODE
	/*RS =0,R/W =0*/
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN ,LOW);
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	61 e0       	ldi	r22, 0x01	; 1
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN ,LOW);
    1e24:	83 e0       	ldi	r24, 0x03	; 3
    1e26:	61 e0       	ldi	r22, 0x01	; 1
    1e28:	40 e0       	ldi	r20, 0x00	; 0
    1e2a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	/*send most 4 bits*/
	Private_voidWriteHalfPort(copy_u8Cmnd>>4);
    1e2e:	89 ad       	ldd	r24, Y+57	; 0x39
    1e30:	82 95       	swap	r24
    1e32:	8f 70       	andi	r24, 0x0F	; 15
    1e34:	0e 94 38 13 	call	0x2670	; 0x2670 <Private_voidWriteHalfPort>
	/*enable pulse*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,HIGH);
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	62 e0       	ldi	r22, 0x02	; 2
    1e3c:	41 e0       	ldi	r20, 0x01	; 1
    1e3e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	a0 e8       	ldi	r26, 0x80	; 128
    1e48:	bf e3       	ldi	r27, 0x3F	; 63
    1e4a:	8d ab       	std	Y+53, r24	; 0x35
    1e4c:	9e ab       	std	Y+54, r25	; 0x36
    1e4e:	af ab       	std	Y+55, r26	; 0x37
    1e50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e52:	6d a9       	ldd	r22, Y+53	; 0x35
    1e54:	7e a9       	ldd	r23, Y+54	; 0x36
    1e56:	8f a9       	ldd	r24, Y+55	; 0x37
    1e58:	98 ad       	ldd	r25, Y+56	; 0x38
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	4a ef       	ldi	r20, 0xFA	; 250
    1e60:	54 e4       	ldi	r21, 0x44	; 68
    1e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e66:	dc 01       	movw	r26, r24
    1e68:	cb 01       	movw	r24, r22
    1e6a:	89 ab       	std	Y+49, r24	; 0x31
    1e6c:	9a ab       	std	Y+50, r25	; 0x32
    1e6e:	ab ab       	std	Y+51, r26	; 0x33
    1e70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1e72:	69 a9       	ldd	r22, Y+49	; 0x31
    1e74:	7a a9       	ldd	r23, Y+50	; 0x32
    1e76:	8b a9       	ldd	r24, Y+51	; 0x33
    1e78:	9c a9       	ldd	r25, Y+52	; 0x34
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	40 e8       	ldi	r20, 0x80	; 128
    1e80:	5f e3       	ldi	r21, 0x3F	; 63
    1e82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e86:	88 23       	and	r24, r24
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <LCD_voidSendCmnd+0x90>
		__ticks = 1;
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	98 ab       	std	Y+48, r25	; 0x30
    1e90:	8f a7       	std	Y+47, r24	; 0x2f
    1e92:	3f c0       	rjmp	.+126    	; 0x1f12 <LCD_voidSendCmnd+0x10e>
	else if (__tmp > 65535)
    1e94:	69 a9       	ldd	r22, Y+49	; 0x31
    1e96:	7a a9       	ldd	r23, Y+50	; 0x32
    1e98:	8b a9       	ldd	r24, Y+51	; 0x33
    1e9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	3f ef       	ldi	r19, 0xFF	; 255
    1ea0:	4f e7       	ldi	r20, 0x7F	; 127
    1ea2:	57 e4       	ldi	r21, 0x47	; 71
    1ea4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ea8:	18 16       	cp	r1, r24
    1eaa:	4c f5       	brge	.+82     	; 0x1efe <LCD_voidSendCmnd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eac:	6d a9       	ldd	r22, Y+53	; 0x35
    1eae:	7e a9       	ldd	r23, Y+54	; 0x36
    1eb0:	8f a9       	ldd	r24, Y+55	; 0x37
    1eb2:	98 ad       	ldd	r25, Y+56	; 0x38
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e2       	ldi	r20, 0x20	; 32
    1eba:	51 e4       	ldi	r21, 0x41	; 65
    1ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec0:	dc 01       	movw	r26, r24
    1ec2:	cb 01       	movw	r24, r22
    1ec4:	bc 01       	movw	r22, r24
    1ec6:	cd 01       	movw	r24, r26
    1ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	98 ab       	std	Y+48, r25	; 0x30
    1ed2:	8f a7       	std	Y+47, r24	; 0x2f
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <LCD_voidSendCmnd+0xf0>
    1ed6:	88 ec       	ldi	r24, 0xC8	; 200
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	9e a7       	std	Y+46, r25	; 0x2e
    1edc:	8d a7       	std	Y+45, r24	; 0x2d
    1ede:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ee0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_voidSendCmnd+0xde>
    1ee6:	9e a7       	std	Y+46, r25	; 0x2e
    1ee8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1eec:	98 a9       	ldd	r25, Y+48	; 0x30
    1eee:	01 97       	sbiw	r24, 0x01	; 1
    1ef0:	98 ab       	std	Y+48, r25	; 0x30
    1ef2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ef6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	69 f7       	brne	.-38     	; 0x1ed6 <LCD_voidSendCmnd+0xd2>
    1efc:	14 c0       	rjmp	.+40     	; 0x1f26 <LCD_voidSendCmnd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efe:	69 a9       	ldd	r22, Y+49	; 0x31
    1f00:	7a a9       	ldd	r23, Y+50	; 0x32
    1f02:	8b a9       	ldd	r24, Y+51	; 0x33
    1f04:	9c a9       	ldd	r25, Y+52	; 0x34
    1f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	98 ab       	std	Y+48, r25	; 0x30
    1f10:	8f a7       	std	Y+47, r24	; 0x2f
    1f12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f14:	98 a9       	ldd	r25, Y+48	; 0x30
    1f16:	9c a7       	std	Y+44, r25	; 0x2c
    1f18:	8b a7       	std	Y+43, r24	; 0x2b
    1f1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	f1 f7       	brne	.-4      	; 0x1f1e <LCD_voidSendCmnd+0x11a>
    1f22:	9c a7       	std	Y+44, r25	; 0x2c
    1f24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,LOW);
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	62 e0       	ldi	r22, 0x02	; 2
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    1f30:	80 e0       	ldi	r24, 0x00	; 0
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	a0 e8       	ldi	r26, 0x80	; 128
    1f36:	bf e3       	ldi	r27, 0x3F	; 63
    1f38:	8f a3       	std	Y+39, r24	; 0x27
    1f3a:	98 a7       	std	Y+40, r25	; 0x28
    1f3c:	a9 a7       	std	Y+41, r26	; 0x29
    1f3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f40:	6f a1       	ldd	r22, Y+39	; 0x27
    1f42:	78 a5       	ldd	r23, Y+40	; 0x28
    1f44:	89 a5       	ldd	r24, Y+41	; 0x29
    1f46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4a ef       	ldi	r20, 0xFA	; 250
    1f4e:	54 e4       	ldi	r21, 0x44	; 68
    1f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	8b a3       	std	Y+35, r24	; 0x23
    1f5a:	9c a3       	std	Y+36, r25	; 0x24
    1f5c:	ad a3       	std	Y+37, r26	; 0x25
    1f5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1f60:	6b a1       	ldd	r22, Y+35	; 0x23
    1f62:	7c a1       	ldd	r23, Y+36	; 0x24
    1f64:	8d a1       	ldd	r24, Y+37	; 0x25
    1f66:	9e a1       	ldd	r25, Y+38	; 0x26
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <LCD_voidSendCmnd+0x17e>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9a a3       	std	Y+34, r25	; 0x22
    1f7e:	89 a3       	std	Y+33, r24	; 0x21
    1f80:	3f c0       	rjmp	.+126    	; 0x2000 <LCD_voidSendCmnd+0x1fc>
	else if (__tmp > 65535)
    1f82:	6b a1       	ldd	r22, Y+35	; 0x23
    1f84:	7c a1       	ldd	r23, Y+36	; 0x24
    1f86:	8d a1       	ldd	r24, Y+37	; 0x25
    1f88:	9e a1       	ldd	r25, Y+38	; 0x26
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	3f ef       	ldi	r19, 0xFF	; 255
    1f8e:	4f e7       	ldi	r20, 0x7F	; 127
    1f90:	57 e4       	ldi	r21, 0x47	; 71
    1f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f96:	18 16       	cp	r1, r24
    1f98:	4c f5       	brge	.+82     	; 0x1fec <LCD_voidSendCmnd+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1f9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1f9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1fa0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e2       	ldi	r20, 0x20	; 32
    1fa8:	51 e4       	ldi	r21, 0x41	; 65
    1faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9a a3       	std	Y+34, r25	; 0x22
    1fc0:	89 a3       	std	Y+33, r24	; 0x21
    1fc2:	0f c0       	rjmp	.+30     	; 0x1fe2 <LCD_voidSendCmnd+0x1de>
    1fc4:	88 ec       	ldi	r24, 0xC8	; 200
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	98 a3       	std	Y+32, r25	; 0x20
    1fca:	8f 8f       	std	Y+31, r24	; 0x1f
    1fcc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fce:	98 a1       	ldd	r25, Y+32	; 0x20
    1fd0:	01 97       	sbiw	r24, 0x01	; 1
    1fd2:	f1 f7       	brne	.-4      	; 0x1fd0 <LCD_voidSendCmnd+0x1cc>
    1fd4:	98 a3       	std	Y+32, r25	; 0x20
    1fd6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fd8:	89 a1       	ldd	r24, Y+33	; 0x21
    1fda:	9a a1       	ldd	r25, Y+34	; 0x22
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	9a a3       	std	Y+34, r25	; 0x22
    1fe0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe2:	89 a1       	ldd	r24, Y+33	; 0x21
    1fe4:	9a a1       	ldd	r25, Y+34	; 0x22
    1fe6:	00 97       	sbiw	r24, 0x00	; 0
    1fe8:	69 f7       	brne	.-38     	; 0x1fc4 <LCD_voidSendCmnd+0x1c0>
    1fea:	14 c0       	rjmp	.+40     	; 0x2014 <LCD_voidSendCmnd+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fec:	6b a1       	ldd	r22, Y+35	; 0x23
    1fee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ff0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ff2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	9a a3       	std	Y+34, r25	; 0x22
    1ffe:	89 a3       	std	Y+33, r24	; 0x21
    2000:	89 a1       	ldd	r24, Y+33	; 0x21
    2002:	9a a1       	ldd	r25, Y+34	; 0x22
    2004:	9e 8f       	std	Y+30, r25	; 0x1e
    2006:	8d 8f       	std	Y+29, r24	; 0x1d
    2008:	8d 8d       	ldd	r24, Y+29	; 0x1d
    200a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    200c:	01 97       	sbiw	r24, 0x01	; 1
    200e:	f1 f7       	brne	.-4      	; 0x200c <LCD_voidSendCmnd+0x208>
    2010:	9e 8f       	std	Y+30, r25	; 0x1e
    2012:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);		
	/*send least 4 bits*/
	Private_voidWriteHalfPort(copy_u8Cmnd);
    2014:	89 ad       	ldd	r24, Y+57	; 0x39
    2016:	0e 94 38 13 	call	0x2670	; 0x2670 <Private_voidWriteHalfPort>
	/*unable pulse*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,HIGH);
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	62 e0       	ldi	r22, 0x02	; 2
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e8       	ldi	r26, 0x80	; 128
    202a:	bf e3       	ldi	r27, 0x3F	; 63
    202c:	89 8f       	std	Y+25, r24	; 0x19
    202e:	9a 8f       	std	Y+26, r25	; 0x1a
    2030:	ab 8f       	std	Y+27, r26	; 0x1b
    2032:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2034:	69 8d       	ldd	r22, Y+25	; 0x19
    2036:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2038:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	4a ef       	ldi	r20, 0xFA	; 250
    2042:	54 e4       	ldi	r21, 0x44	; 68
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8d 8b       	std	Y+21, r24	; 0x15
    204e:	9e 8b       	std	Y+22, r25	; 0x16
    2050:	af 8b       	std	Y+23, r26	; 0x17
    2052:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2054:	6d 89       	ldd	r22, Y+21	; 0x15
    2056:	7e 89       	ldd	r23, Y+22	; 0x16
    2058:	8f 89       	ldd	r24, Y+23	; 0x17
    205a:	98 8d       	ldd	r25, Y+24	; 0x18
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_voidSendCmnd+0x272>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9c 8b       	std	Y+20, r25	; 0x14
    2072:	8b 8b       	std	Y+19, r24	; 0x13
    2074:	3f c0       	rjmp	.+126    	; 0x20f4 <LCD_voidSendCmnd+0x2f0>
	else if (__tmp > 65535)
    2076:	6d 89       	ldd	r22, Y+21	; 0x15
    2078:	7e 89       	ldd	r23, Y+22	; 0x16
    207a:	8f 89       	ldd	r24, Y+23	; 0x17
    207c:	98 8d       	ldd	r25, Y+24	; 0x18
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	4c f5       	brge	.+82     	; 0x20e0 <LCD_voidSendCmnd+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208e:	69 8d       	ldd	r22, Y+25	; 0x19
    2090:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2092:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2094:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2096:	20 e0       	ldi	r18, 0x00	; 0
    2098:	30 e0       	ldi	r19, 0x00	; 0
    209a:	40 e2       	ldi	r20, 0x20	; 32
    209c:	51 e4       	ldi	r21, 0x41	; 65
    209e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	bc 01       	movw	r22, r24
    20a8:	cd 01       	movw	r24, r26
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	9c 8b       	std	Y+20, r25	; 0x14
    20b4:	8b 8b       	std	Y+19, r24	; 0x13
    20b6:	0f c0       	rjmp	.+30     	; 0x20d6 <LCD_voidSendCmnd+0x2d2>
    20b8:	88 ec       	ldi	r24, 0xC8	; 200
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	9a 8b       	std	Y+18, r25	; 0x12
    20be:	89 8b       	std	Y+17, r24	; 0x11
    20c0:	89 89       	ldd	r24, Y+17	; 0x11
    20c2:	9a 89       	ldd	r25, Y+18	; 0x12
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <LCD_voidSendCmnd+0x2c0>
    20c8:	9a 8b       	std	Y+18, r25	; 0x12
    20ca:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20cc:	8b 89       	ldd	r24, Y+19	; 0x13
    20ce:	9c 89       	ldd	r25, Y+20	; 0x14
    20d0:	01 97       	sbiw	r24, 0x01	; 1
    20d2:	9c 8b       	std	Y+20, r25	; 0x14
    20d4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d6:	8b 89       	ldd	r24, Y+19	; 0x13
    20d8:	9c 89       	ldd	r25, Y+20	; 0x14
    20da:	00 97       	sbiw	r24, 0x00	; 0
    20dc:	69 f7       	brne	.-38     	; 0x20b8 <LCD_voidSendCmnd+0x2b4>
    20de:	14 c0       	rjmp	.+40     	; 0x2108 <LCD_voidSendCmnd+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e0:	6d 89       	ldd	r22, Y+21	; 0x15
    20e2:	7e 89       	ldd	r23, Y+22	; 0x16
    20e4:	8f 89       	ldd	r24, Y+23	; 0x17
    20e6:	98 8d       	ldd	r25, Y+24	; 0x18
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9c 8b       	std	Y+20, r25	; 0x14
    20f2:	8b 8b       	std	Y+19, r24	; 0x13
    20f4:	8b 89       	ldd	r24, Y+19	; 0x13
    20f6:	9c 89       	ldd	r25, Y+20	; 0x14
    20f8:	98 8b       	std	Y+16, r25	; 0x10
    20fa:	8f 87       	std	Y+15, r24	; 0x0f
    20fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    20fe:	98 89       	ldd	r25, Y+16	; 0x10
    2100:	01 97       	sbiw	r24, 0x01	; 1
    2102:	f1 f7       	brne	.-4      	; 0x2100 <LCD_voidSendCmnd+0x2fc>
    2104:	98 8b       	std	Y+16, r25	; 0x10
    2106:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,LOW);
    2108:	80 e0       	ldi	r24, 0x00	; 0
    210a:	62 e0       	ldi	r22, 0x02	; 2
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	8b 87       	std	Y+11, r24	; 0x0b
    211c:	9c 87       	std	Y+12, r25	; 0x0c
    211e:	ad 87       	std	Y+13, r26	; 0x0d
    2120:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	6b 85       	ldd	r22, Y+11	; 0x0b
    2124:	7c 85       	ldd	r23, Y+12	; 0x0c
    2126:	8d 85       	ldd	r24, Y+13	; 0x0d
    2128:	9e 85       	ldd	r25, Y+14	; 0x0e
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a ef       	ldi	r20, 0xFA	; 250
    2130:	54 e4       	ldi	r21, 0x44	; 68
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8f 83       	std	Y+7, r24	; 0x07
    213c:	98 87       	std	Y+8, r25	; 0x08
    213e:	a9 87       	std	Y+9, r26	; 0x09
    2140:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2142:	6f 81       	ldd	r22, Y+7	; 0x07
    2144:	78 85       	ldd	r23, Y+8	; 0x08
    2146:	89 85       	ldd	r24, Y+9	; 0x09
    2148:	9a 85       	ldd	r25, Y+10	; 0x0a
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <LCD_voidSendCmnd+0x360>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9e 83       	std	Y+6, r25	; 0x06
    2160:	8d 83       	std	Y+5, r24	; 0x05
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <LCD_voidSendCmnd+0x3de>
	else if (__tmp > 65535)
    2164:	6f 81       	ldd	r22, Y+7	; 0x07
    2166:	78 85       	ldd	r23, Y+8	; 0x08
    2168:	89 85       	ldd	r24, Y+9	; 0x09
    216a:	9a 85       	ldd	r25, Y+10	; 0x0a
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <LCD_voidSendCmnd+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	6b 85       	ldd	r22, Y+11	; 0x0b
    217e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2180:	8d 85       	ldd	r24, Y+13	; 0x0d
    2182:	9e 85       	ldd	r25, Y+14	; 0x0e
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9e 83       	std	Y+6, r25	; 0x06
    21a2:	8d 83       	std	Y+5, r24	; 0x05
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <LCD_voidSendCmnd+0x3c0>
    21a6:	88 ec       	ldi	r24, 0xC8	; 200
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9c 83       	std	Y+4, r25	; 0x04
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	8b 81       	ldd	r24, Y+3	; 0x03
    21b0:	9c 81       	ldd	r25, Y+4	; 0x04
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_voidSendCmnd+0x3ae>
    21b6:	9c 83       	std	Y+4, r25	; 0x04
    21b8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9e 83       	std	Y+6, r25	; 0x06
    21c2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8d 81       	ldd	r24, Y+5	; 0x05
    21c6:	9e 81       	ldd	r25, Y+6	; 0x06
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <LCD_voidSendCmnd+0x3a2>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <LCD_voidSendCmnd+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6f 81       	ldd	r22, Y+7	; 0x07
    21d0:	78 85       	ldd	r23, Y+8	; 0x08
    21d2:	89 85       	ldd	r24, Y+9	; 0x09
    21d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9e 83       	std	Y+6, r25	; 0x06
    21e0:	8d 83       	std	Y+5, r24	; 0x05
    21e2:	8d 81       	ldd	r24, Y+5	; 0x05
    21e4:	9e 81       	ldd	r25, Y+6	; 0x06
    21e6:	9a 83       	std	Y+2, r25	; 0x02
    21e8:	89 83       	std	Y+1, r24	; 0x01
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_voidSendCmnd+0x3ea>
    21f2:	9a 83       	std	Y+2, r25	; 0x02
    21f4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
#endif
	
	
}   
    21f6:	e9 96       	adiw	r28, 0x39	; 57
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	de bf       	out	0x3e, r29	; 62
    21fe:	0f be       	out	0x3f, r0	; 63
    2200:	cd bf       	out	0x3d, r28	; 61
    2202:	cf 91       	pop	r28
    2204:	df 91       	pop	r29
    2206:	08 95       	ret

00002208 <LCD_voidSendChar>:
void LCD_voidSendChar   (u8 copy_u8Char)
{
    2208:	df 93       	push	r29
    220a:	cf 93       	push	r28
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
    2210:	e9 97       	sbiw	r28, 0x39	; 57
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	f8 94       	cli
    2216:	de bf       	out	0x3e, r29	; 62
    2218:	0f be       	out	0x3f, r0	; 63
    221a:	cd bf       	out	0x3d, r28	; 61
    221c:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_EN_PIN,LOW);
	_delay_ms(1);		
#elif LCD_U8_MODE== LCD_U8_4_BIT_MODE
	/*RS =1,R/W =0*/
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN ,HIGH);
    221e:	80 e0       	ldi	r24, 0x00	; 0
    2220:	61 e0       	ldi	r22, 0x01	; 1
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN ,LOW);
    2228:	83 e0       	ldi	r24, 0x03	; 3
    222a:	61 e0       	ldi	r22, 0x01	; 1
    222c:	40 e0       	ldi	r20, 0x00	; 0
    222e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	/*send most 4 bits*/
	Private_voidWriteHalfPort(copy_u8Char>>4);
    2232:	89 ad       	ldd	r24, Y+57	; 0x39
    2234:	82 95       	swap	r24
    2236:	8f 70       	andi	r24, 0x0F	; 15
    2238:	0e 94 38 13 	call	0x2670	; 0x2670 <Private_voidWriteHalfPort>
	/*enable pulse*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,HIGH);
    223c:	80 e0       	ldi	r24, 0x00	; 0
    223e:	62 e0       	ldi	r22, 0x02	; 2
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	a0 e8       	ldi	r26, 0x80	; 128
    224c:	bf e3       	ldi	r27, 0x3F	; 63
    224e:	8d ab       	std	Y+53, r24	; 0x35
    2250:	9e ab       	std	Y+54, r25	; 0x36
    2252:	af ab       	std	Y+55, r26	; 0x37
    2254:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2256:	6d a9       	ldd	r22, Y+53	; 0x35
    2258:	7e a9       	ldd	r23, Y+54	; 0x36
    225a:	8f a9       	ldd	r24, Y+55	; 0x37
    225c:	98 ad       	ldd	r25, Y+56	; 0x38
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a ef       	ldi	r20, 0xFA	; 250
    2264:	54 e4       	ldi	r21, 0x44	; 68
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	89 ab       	std	Y+49, r24	; 0x31
    2270:	9a ab       	std	Y+50, r25	; 0x32
    2272:	ab ab       	std	Y+51, r26	; 0x33
    2274:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2276:	69 a9       	ldd	r22, Y+49	; 0x31
    2278:	7a a9       	ldd	r23, Y+50	; 0x32
    227a:	8b a9       	ldd	r24, Y+51	; 0x33
    227c:	9c a9       	ldd	r25, Y+52	; 0x34
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e8       	ldi	r20, 0x80	; 128
    2284:	5f e3       	ldi	r21, 0x3F	; 63
    2286:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228a:	88 23       	and	r24, r24
    228c:	2c f4       	brge	.+10     	; 0x2298 <LCD_voidSendChar+0x90>
		__ticks = 1;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	98 ab       	std	Y+48, r25	; 0x30
    2294:	8f a7       	std	Y+47, r24	; 0x2f
    2296:	3f c0       	rjmp	.+126    	; 0x2316 <LCD_voidSendChar+0x10e>
	else if (__tmp > 65535)
    2298:	69 a9       	ldd	r22, Y+49	; 0x31
    229a:	7a a9       	ldd	r23, Y+50	; 0x32
    229c:	8b a9       	ldd	r24, Y+51	; 0x33
    229e:	9c a9       	ldd	r25, Y+52	; 0x34
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	3f ef       	ldi	r19, 0xFF	; 255
    22a4:	4f e7       	ldi	r20, 0x7F	; 127
    22a6:	57 e4       	ldi	r21, 0x47	; 71
    22a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ac:	18 16       	cp	r1, r24
    22ae:	4c f5       	brge	.+82     	; 0x2302 <LCD_voidSendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b0:	6d a9       	ldd	r22, Y+53	; 0x35
    22b2:	7e a9       	ldd	r23, Y+54	; 0x36
    22b4:	8f a9       	ldd	r24, Y+55	; 0x37
    22b6:	98 ad       	ldd	r25, Y+56	; 0x38
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e2       	ldi	r20, 0x20	; 32
    22be:	51 e4       	ldi	r21, 0x41	; 65
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	98 ab       	std	Y+48, r25	; 0x30
    22d6:	8f a7       	std	Y+47, r24	; 0x2f
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <LCD_voidSendChar+0xf0>
    22da:	88 ec       	ldi	r24, 0xC8	; 200
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9e a7       	std	Y+46, r25	; 0x2e
    22e0:	8d a7       	std	Y+45, r24	; 0x2d
    22e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    22e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <LCD_voidSendChar+0xde>
    22ea:	9e a7       	std	Y+46, r25	; 0x2e
    22ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    22f0:	98 a9       	ldd	r25, Y+48	; 0x30
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	98 ab       	std	Y+48, r25	; 0x30
    22f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22fa:	98 a9       	ldd	r25, Y+48	; 0x30
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	69 f7       	brne	.-38     	; 0x22da <LCD_voidSendChar+0xd2>
    2300:	14 c0       	rjmp	.+40     	; 0x232a <LCD_voidSendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2302:	69 a9       	ldd	r22, Y+49	; 0x31
    2304:	7a a9       	ldd	r23, Y+50	; 0x32
    2306:	8b a9       	ldd	r24, Y+51	; 0x33
    2308:	9c a9       	ldd	r25, Y+52	; 0x34
    230a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	98 ab       	std	Y+48, r25	; 0x30
    2314:	8f a7       	std	Y+47, r24	; 0x2f
    2316:	8f a5       	ldd	r24, Y+47	; 0x2f
    2318:	98 a9       	ldd	r25, Y+48	; 0x30
    231a:	9c a7       	std	Y+44, r25	; 0x2c
    231c:	8b a7       	std	Y+43, r24	; 0x2b
    231e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2320:	9c a5       	ldd	r25, Y+44	; 0x2c
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <LCD_voidSendChar+0x11a>
    2326:	9c a7       	std	Y+44, r25	; 0x2c
    2328:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,LOW);
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	62 e0       	ldi	r22, 0x02	; 2
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	a0 e8       	ldi	r26, 0x80	; 128
    233a:	bf e3       	ldi	r27, 0x3F	; 63
    233c:	8f a3       	std	Y+39, r24	; 0x27
    233e:	98 a7       	std	Y+40, r25	; 0x28
    2340:	a9 a7       	std	Y+41, r26	; 0x29
    2342:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2344:	6f a1       	ldd	r22, Y+39	; 0x27
    2346:	78 a5       	ldd	r23, Y+40	; 0x28
    2348:	89 a5       	ldd	r24, Y+41	; 0x29
    234a:	9a a5       	ldd	r25, Y+42	; 0x2a
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	4a ef       	ldi	r20, 0xFA	; 250
    2352:	54 e4       	ldi	r21, 0x44	; 68
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	8b a3       	std	Y+35, r24	; 0x23
    235e:	9c a3       	std	Y+36, r25	; 0x24
    2360:	ad a3       	std	Y+37, r26	; 0x25
    2362:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2364:	6b a1       	ldd	r22, Y+35	; 0x23
    2366:	7c a1       	ldd	r23, Y+36	; 0x24
    2368:	8d a1       	ldd	r24, Y+37	; 0x25
    236a:	9e a1       	ldd	r25, Y+38	; 0x26
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e8       	ldi	r20, 0x80	; 128
    2372:	5f e3       	ldi	r21, 0x3F	; 63
    2374:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2378:	88 23       	and	r24, r24
    237a:	2c f4       	brge	.+10     	; 0x2386 <LCD_voidSendChar+0x17e>
		__ticks = 1;
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	9a a3       	std	Y+34, r25	; 0x22
    2382:	89 a3       	std	Y+33, r24	; 0x21
    2384:	3f c0       	rjmp	.+126    	; 0x2404 <LCD_voidSendChar+0x1fc>
	else if (__tmp > 65535)
    2386:	6b a1       	ldd	r22, Y+35	; 0x23
    2388:	7c a1       	ldd	r23, Y+36	; 0x24
    238a:	8d a1       	ldd	r24, Y+37	; 0x25
    238c:	9e a1       	ldd	r25, Y+38	; 0x26
    238e:	20 e0       	ldi	r18, 0x00	; 0
    2390:	3f ef       	ldi	r19, 0xFF	; 255
    2392:	4f e7       	ldi	r20, 0x7F	; 127
    2394:	57 e4       	ldi	r21, 0x47	; 71
    2396:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    239a:	18 16       	cp	r1, r24
    239c:	4c f5       	brge	.+82     	; 0x23f0 <LCD_voidSendChar+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    239e:	6f a1       	ldd	r22, Y+39	; 0x27
    23a0:	78 a5       	ldd	r23, Y+40	; 0x28
    23a2:	89 a5       	ldd	r24, Y+41	; 0x29
    23a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e2       	ldi	r20, 0x20	; 32
    23ac:	51 e4       	ldi	r21, 0x41	; 65
    23ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9a a3       	std	Y+34, r25	; 0x22
    23c4:	89 a3       	std	Y+33, r24	; 0x21
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <LCD_voidSendChar+0x1de>
    23c8:	88 ec       	ldi	r24, 0xC8	; 200
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	98 a3       	std	Y+32, r25	; 0x20
    23ce:	8f 8f       	std	Y+31, r24	; 0x1f
    23d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23d2:	98 a1       	ldd	r25, Y+32	; 0x20
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <LCD_voidSendChar+0x1cc>
    23d8:	98 a3       	std	Y+32, r25	; 0x20
    23da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	89 a1       	ldd	r24, Y+33	; 0x21
    23de:	9a a1       	ldd	r25, Y+34	; 0x22
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	9a a3       	std	Y+34, r25	; 0x22
    23e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e6:	89 a1       	ldd	r24, Y+33	; 0x21
    23e8:	9a a1       	ldd	r25, Y+34	; 0x22
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	69 f7       	brne	.-38     	; 0x23c8 <LCD_voidSendChar+0x1c0>
    23ee:	14 c0       	rjmp	.+40     	; 0x2418 <LCD_voidSendChar+0x210>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f0:	6b a1       	ldd	r22, Y+35	; 0x23
    23f2:	7c a1       	ldd	r23, Y+36	; 0x24
    23f4:	8d a1       	ldd	r24, Y+37	; 0x25
    23f6:	9e a1       	ldd	r25, Y+38	; 0x26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9a a3       	std	Y+34, r25	; 0x22
    2402:	89 a3       	std	Y+33, r24	; 0x21
    2404:	89 a1       	ldd	r24, Y+33	; 0x21
    2406:	9a a1       	ldd	r25, Y+34	; 0x22
    2408:	9e 8f       	std	Y+30, r25	; 0x1e
    240a:	8d 8f       	std	Y+29, r24	; 0x1d
    240c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    240e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_voidSendChar+0x208>
    2414:	9e 8f       	std	Y+30, r25	; 0x1e
    2416:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);		
	/*send least 4 bits*/
	Private_voidWriteHalfPort(copy_u8Char);
    2418:	89 ad       	ldd	r24, Y+57	; 0x39
    241a:	0e 94 38 13 	call	0x2670	; 0x2670 <Private_voidWriteHalfPort>
	/*unable pulse*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,HIGH);
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	62 e0       	ldi	r22, 0x02	; 2
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2428:	80 e0       	ldi	r24, 0x00	; 0
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	a0 e8       	ldi	r26, 0x80	; 128
    242e:	bf e3       	ldi	r27, 0x3F	; 63
    2430:	89 8f       	std	Y+25, r24	; 0x19
    2432:	9a 8f       	std	Y+26, r25	; 0x1a
    2434:	ab 8f       	std	Y+27, r26	; 0x1b
    2436:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2438:	69 8d       	ldd	r22, Y+25	; 0x19
    243a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    243c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    243e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2440:	20 e0       	ldi	r18, 0x00	; 0
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	4a ef       	ldi	r20, 0xFA	; 250
    2446:	54 e4       	ldi	r21, 0x44	; 68
    2448:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	8d 8b       	std	Y+21, r24	; 0x15
    2452:	9e 8b       	std	Y+22, r25	; 0x16
    2454:	af 8b       	std	Y+23, r26	; 0x17
    2456:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2458:	6d 89       	ldd	r22, Y+21	; 0x15
    245a:	7e 89       	ldd	r23, Y+22	; 0x16
    245c:	8f 89       	ldd	r24, Y+23	; 0x17
    245e:	98 8d       	ldd	r25, Y+24	; 0x18
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e8       	ldi	r20, 0x80	; 128
    2466:	5f e3       	ldi	r21, 0x3F	; 63
    2468:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    246c:	88 23       	and	r24, r24
    246e:	2c f4       	brge	.+10     	; 0x247a <LCD_voidSendChar+0x272>
		__ticks = 1;
    2470:	81 e0       	ldi	r24, 0x01	; 1
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9c 8b       	std	Y+20, r25	; 0x14
    2476:	8b 8b       	std	Y+19, r24	; 0x13
    2478:	3f c0       	rjmp	.+126    	; 0x24f8 <LCD_voidSendChar+0x2f0>
	else if (__tmp > 65535)
    247a:	6d 89       	ldd	r22, Y+21	; 0x15
    247c:	7e 89       	ldd	r23, Y+22	; 0x16
    247e:	8f 89       	ldd	r24, Y+23	; 0x17
    2480:	98 8d       	ldd	r25, Y+24	; 0x18
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	3f ef       	ldi	r19, 0xFF	; 255
    2486:	4f e7       	ldi	r20, 0x7F	; 127
    2488:	57 e4       	ldi	r21, 0x47	; 71
    248a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    248e:	18 16       	cp	r1, r24
    2490:	4c f5       	brge	.+82     	; 0x24e4 <LCD_voidSendChar+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2492:	69 8d       	ldd	r22, Y+25	; 0x19
    2494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e2       	ldi	r20, 0x20	; 32
    24a0:	51 e4       	ldi	r21, 0x41	; 65
    24a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a6:	dc 01       	movw	r26, r24
    24a8:	cb 01       	movw	r24, r22
    24aa:	bc 01       	movw	r22, r24
    24ac:	cd 01       	movw	r24, r26
    24ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	9c 8b       	std	Y+20, r25	; 0x14
    24b8:	8b 8b       	std	Y+19, r24	; 0x13
    24ba:	0f c0       	rjmp	.+30     	; 0x24da <LCD_voidSendChar+0x2d2>
    24bc:	88 ec       	ldi	r24, 0xC8	; 200
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	9a 8b       	std	Y+18, r25	; 0x12
    24c2:	89 8b       	std	Y+17, r24	; 0x11
    24c4:	89 89       	ldd	r24, Y+17	; 0x11
    24c6:	9a 89       	ldd	r25, Y+18	; 0x12
    24c8:	01 97       	sbiw	r24, 0x01	; 1
    24ca:	f1 f7       	brne	.-4      	; 0x24c8 <LCD_voidSendChar+0x2c0>
    24cc:	9a 8b       	std	Y+18, r25	; 0x12
    24ce:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d0:	8b 89       	ldd	r24, Y+19	; 0x13
    24d2:	9c 89       	ldd	r25, Y+20	; 0x14
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	9c 8b       	std	Y+20, r25	; 0x14
    24d8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24da:	8b 89       	ldd	r24, Y+19	; 0x13
    24dc:	9c 89       	ldd	r25, Y+20	; 0x14
    24de:	00 97       	sbiw	r24, 0x00	; 0
    24e0:	69 f7       	brne	.-38     	; 0x24bc <LCD_voidSendChar+0x2b4>
    24e2:	14 c0       	rjmp	.+40     	; 0x250c <LCD_voidSendChar+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e4:	6d 89       	ldd	r22, Y+21	; 0x15
    24e6:	7e 89       	ldd	r23, Y+22	; 0x16
    24e8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ea:	98 8d       	ldd	r25, Y+24	; 0x18
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9c 8b       	std	Y+20, r25	; 0x14
    24f6:	8b 8b       	std	Y+19, r24	; 0x13
    24f8:	8b 89       	ldd	r24, Y+19	; 0x13
    24fa:	9c 89       	ldd	r25, Y+20	; 0x14
    24fc:	98 8b       	std	Y+16, r25	; 0x10
    24fe:	8f 87       	std	Y+15, r24	; 0x0f
    2500:	8f 85       	ldd	r24, Y+15	; 0x0f
    2502:	98 89       	ldd	r25, Y+16	; 0x10
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_voidSendChar+0x2fc>
    2508:	98 8b       	std	Y+16, r25	; 0x10
    250a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,LOW);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e8       	ldi	r26, 0x80	; 128
    251c:	bf e3       	ldi	r27, 0x3F	; 63
    251e:	8b 87       	std	Y+11, r24	; 0x0b
    2520:	9c 87       	std	Y+12, r25	; 0x0c
    2522:	ad 87       	std	Y+13, r26	; 0x0d
    2524:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6b 85       	ldd	r22, Y+11	; 0x0b
    2528:	7c 85       	ldd	r23, Y+12	; 0x0c
    252a:	8d 85       	ldd	r24, Y+13	; 0x0d
    252c:	9e 85       	ldd	r25, Y+14	; 0x0e
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a ef       	ldi	r20, 0xFA	; 250
    2534:	54 e4       	ldi	r21, 0x44	; 68
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	8f 83       	std	Y+7, r24	; 0x07
    2540:	98 87       	std	Y+8, r25	; 0x08
    2542:	a9 87       	std	Y+9, r26	; 0x09
    2544:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2546:	6f 81       	ldd	r22, Y+7	; 0x07
    2548:	78 85       	ldd	r23, Y+8	; 0x08
    254a:	89 85       	ldd	r24, Y+9	; 0x09
    254c:	9a 85       	ldd	r25, Y+10	; 0x0a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <LCD_voidSendChar+0x360>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9e 83       	std	Y+6, r25	; 0x06
    2564:	8d 83       	std	Y+5, r24	; 0x05
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <LCD_voidSendChar+0x3de>
	else if (__tmp > 65535)
    2568:	6f 81       	ldd	r22, Y+7	; 0x07
    256a:	78 85       	ldd	r23, Y+8	; 0x08
    256c:	89 85       	ldd	r24, Y+9	; 0x09
    256e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <LCD_voidSendChar+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6b 85       	ldd	r22, Y+11	; 0x0b
    2582:	7c 85       	ldd	r23, Y+12	; 0x0c
    2584:	8d 85       	ldd	r24, Y+13	; 0x0d
    2586:	9e 85       	ldd	r25, Y+14	; 0x0e
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9e 83       	std	Y+6, r25	; 0x06
    25a6:	8d 83       	std	Y+5, r24	; 0x05
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <LCD_voidSendChar+0x3c0>
    25aa:	88 ec       	ldi	r24, 0xC8	; 200
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	9c 83       	std	Y+4, r25	; 0x04
    25b0:	8b 83       	std	Y+3, r24	; 0x03
    25b2:	8b 81       	ldd	r24, Y+3	; 0x03
    25b4:	9c 81       	ldd	r25, Y+4	; 0x04
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_voidSendChar+0x3ae>
    25ba:	9c 83       	std	Y+4, r25	; 0x04
    25bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	9e 81       	ldd	r25, Y+6	; 0x06
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	9e 83       	std	Y+6, r25	; 0x06
    25c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ca:	9e 81       	ldd	r25, Y+6	; 0x06
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <LCD_voidSendChar+0x3a2>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <LCD_voidSendChar+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	6f 81       	ldd	r22, Y+7	; 0x07
    25d4:	78 85       	ldd	r23, Y+8	; 0x08
    25d6:	89 85       	ldd	r24, Y+9	; 0x09
    25d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
    25e8:	9e 81       	ldd	r25, Y+6	; 0x06
    25ea:	9a 83       	std	Y+2, r25	; 0x02
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	89 81       	ldd	r24, Y+1	; 0x01
    25f0:	9a 81       	ldd	r25, Y+2	; 0x02
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_voidSendChar+0x3ea>
    25f6:	9a 83       	std	Y+2, r25	; 0x02
    25f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);	
#endif
}
    25fa:	e9 96       	adiw	r28, 0x39	; 57
    25fc:	0f b6       	in	r0, 0x3f	; 63
    25fe:	f8 94       	cli
    2600:	de bf       	out	0x3e, r29	; 62
    2602:	0f be       	out	0x3f, r0	; 63
    2604:	cd bf       	out	0x3d, r28	; 61
    2606:	cf 91       	pop	r28
    2608:	df 91       	pop	r29
    260a:	08 95       	ret

0000260c <LCD_voidGoToXY>:


void LCD_voidGoToXY     (u8 copy_u8Line,u8 copy_u8Col)
{
    260c:	df 93       	push	r29
    260e:	cf 93       	push	r28
    2610:	00 d0       	rcall	.+0      	; 0x2612 <LCD_voidGoToXY+0x6>
    2612:	00 d0       	rcall	.+0      	; 0x2614 <LCD_voidGoToXY+0x8>
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	6a 83       	std	Y+2, r22	; 0x02

	switch(copy_u8Line)
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	3c 83       	std	Y+4, r19	; 0x04
    2624:	2b 83       	std	Y+3, r18	; 0x03
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	81 30       	cpi	r24, 0x01	; 1
    262c:	91 05       	cpc	r25, r1
    262e:	31 f0       	breq	.+12     	; 0x263c <LCD_voidGoToXY+0x30>
    2630:	2b 81       	ldd	r18, Y+3	; 0x03
    2632:	3c 81       	ldd	r19, Y+4	; 0x04
    2634:	22 30       	cpi	r18, 0x02	; 2
    2636:	31 05       	cpc	r19, r1
    2638:	31 f0       	breq	.+12     	; 0x2646 <LCD_voidGoToXY+0x3a>
    263a:	09 c0       	rjmp	.+18     	; 0x264e <LCD_voidGoToXY+0x42>
	{
		case LCD_U8_LINE1 :
		   LCD_voidSendCmnd(0x80 + copy_u8Col);
    263c:	8a 81       	ldd	r24, Y+2	; 0x02
    263e:	80 58       	subi	r24, 0x80	; 128
    2640:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_voidSendCmnd>
    2644:	04 c0       	rjmp	.+8      	; 0x264e <LCD_voidGoToXY+0x42>
		break;
		case LCD_U8_LINE2 :
		   LCD_voidSendCmnd(0xc0 + copy_u8Col);
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	80 54       	subi	r24, 0x40	; 64
    264a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_voidSendCmnd>
		break;		
	}
	
}
    264e:	0f 90       	pop	r0
    2650:	0f 90       	pop	r0
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	cf 91       	pop	r28
    2658:	df 91       	pop	r29
    265a:	08 95       	ret

0000265c <LCD_voidClear>:

void LCD_voidClear      (void)
{
    265c:	df 93       	push	r29
    265e:	cf 93       	push	r28
    2660:	cd b7       	in	r28, 0x3d	; 61
    2662:	de b7       	in	r29, 0x3e	; 62
	
	 LCD_voidSendCmnd(0x01);
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <LCD_voidSendCmnd>
	
	
}
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <Private_voidWriteHalfPort>:

static void Private_voidWriteHalfPort(u8 copy_u8Value)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	00 d0       	rcall	.+0      	; 0x2676 <Private_voidWriteHalfPort+0x6>
    2676:	cd b7       	in	r28, 0x3d	; 61
    2678:	de b7       	in	r29, 0x3e	; 62
    267a:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8BitValue = GET_BIT(copy_u8Value,0);
    267c:	8a 81       	ldd	r24, Y+2	; 0x02
    267e:	81 70       	andi	r24, 0x01	; 1
    2680:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8BitValue == LOW)
    2682:	89 81       	ldd	r24, Y+1	; 0x01
    2684:	88 23       	and	r24, r24
    2686:	31 f4       	brne	.+12     	; 0x2694 <Private_voidWriteHalfPort+0x24>
	{
	    DIO_u8SetPinValue(LCD_u8_D4_PORT ,LCD_u8_D4_PIN,LOW);
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	63 e0       	ldi	r22, 0x03	; 3
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2692:	05 c0       	rjmp	.+10     	; 0x269e <Private_voidWriteHalfPort+0x2e>
	}
	else
	{
	    DIO_u8SetPinValue(LCD_u8_D4_PORT ,LCD_u8_D4_PIN,HIGH);		
    2694:	80 e0       	ldi	r24, 0x00	; 0
    2696:	63 e0       	ldi	r22, 0x03	; 3
    2698:	41 e0       	ldi	r20, 0x01	; 1
    269a:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	}
    local_u8BitValue = GET_BIT(copy_u8Value,1);
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	86 95       	lsr	r24
    26a2:	81 70       	andi	r24, 0x01	; 1
    26a4:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8BitValue == LOW)
    26a6:	89 81       	ldd	r24, Y+1	; 0x01
    26a8:	88 23       	and	r24, r24
    26aa:	31 f4       	brne	.+12     	; 0x26b8 <Private_voidWriteHalfPort+0x48>
	{
	    DIO_u8SetPinValue(LCD_u8_D5_PORT ,LCD_u8_D5_PIN,LOW);
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	64 e0       	ldi	r22, 0x04	; 4
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    26b6:	05 c0       	rjmp	.+10     	; 0x26c2 <Private_voidWriteHalfPort+0x52>
	}
	else
	{
	    DIO_u8SetPinValue(LCD_u8_D5_PORT ,LCD_u8_D5_PIN,HIGH);		
    26b8:	80 e0       	ldi	r24, 0x00	; 0
    26ba:	64 e0       	ldi	r22, 0x04	; 4
    26bc:	41 e0       	ldi	r20, 0x01	; 1
    26be:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	}
	local_u8BitValue = GET_BIT(copy_u8Value,2);
    26c2:	8a 81       	ldd	r24, Y+2	; 0x02
    26c4:	86 95       	lsr	r24
    26c6:	86 95       	lsr	r24
    26c8:	81 70       	andi	r24, 0x01	; 1
    26ca:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8BitValue == LOW)
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	88 23       	and	r24, r24
    26d0:	31 f4       	brne	.+12     	; 0x26de <Private_voidWriteHalfPort+0x6e>
	{
	    DIO_u8SetPinValue(LCD_u8_D6_PORT ,LCD_u8_D6_PIN,LOW);
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	65 e0       	ldi	r22, 0x05	; 5
    26d6:	40 e0       	ldi	r20, 0x00	; 0
    26d8:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    26dc:	05 c0       	rjmp	.+10     	; 0x26e8 <Private_voidWriteHalfPort+0x78>
	}
	else
	{
	    DIO_u8SetPinValue(LCD_u8_D6_PORT ,LCD_u8_D6_PIN,HIGH);		
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	65 e0       	ldi	r22, 0x05	; 5
    26e2:	41 e0       	ldi	r20, 0x01	; 1
    26e4:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	}
	local_u8BitValue = GET_BIT(copy_u8Value,3);
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	86 95       	lsr	r24
    26ec:	86 95       	lsr	r24
    26ee:	86 95       	lsr	r24
    26f0:	81 70       	andi	r24, 0x01	; 1
    26f2:	89 83       	std	Y+1, r24	; 0x01
	if(local_u8BitValue == LOW)
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	88 23       	and	r24, r24
    26f8:	31 f4       	brne	.+12     	; 0x2706 <Private_voidWriteHalfPort+0x96>
	{
	    DIO_u8SetPinValue(LCD_u8_D7_PORT ,LCD_u8_D7_PIN,LOW);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	66 e0       	ldi	r22, 0x06	; 6
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
    2704:	05 c0       	rjmp	.+10     	; 0x2710 <Private_voidWriteHalfPort+0xa0>
	}
	else
	{
	    DIO_u8SetPinValue(LCD_u8_D7_PORT ,LCD_u8_D7_PIN,HIGH);		
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	66 e0       	ldi	r22, 0x06	; 6
    270a:	41 e0       	ldi	r20, 0x01	; 1
    270c:	0e 94 6b 07 	call	0xed6	; 0xed6 <DIO_u8SetPinValue>
	}
}
    2710:	0f 90       	pop	r0
    2712:	0f 90       	pop	r0
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <LCD_voidSendStr>:


void LCD_voidSendStr        (u8 *copy_u8PSTR)
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <LCD_voidSendStr+0x6>
    2720:	0f 92       	push	r0
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
    2726:	9b 83       	std	Y+3, r25	; 0x03
    2728:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    272a:	19 82       	std	Y+1, r1	; 0x01
    272c:	0e c0       	rjmp	.+28     	; 0x274a <LCD_voidSendStr+0x30>
	while(copy_u8PSTR[i] !='\0')
	{
		LCD_voidSendChar(copy_u8PSTR[i]);
    272e:	89 81       	ldd	r24, Y+1	; 0x01
    2730:	28 2f       	mov	r18, r24
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	8a 81       	ldd	r24, Y+2	; 0x02
    2736:	9b 81       	ldd	r25, Y+3	; 0x03
    2738:	fc 01       	movw	r30, r24
    273a:	e2 0f       	add	r30, r18
    273c:	f3 1f       	adc	r31, r19
    273e:	80 81       	ld	r24, Z
    2740:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_voidSendChar>
		i++;
    2744:	89 81       	ldd	r24, Y+1	; 0x01
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	89 83       	std	Y+1, r24	; 0x01


void LCD_voidSendStr        (u8 *copy_u8PSTR)
{
	u8 i=0;
	while(copy_u8PSTR[i] !='\0')
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	28 2f       	mov	r18, r24
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	8a 81       	ldd	r24, Y+2	; 0x02
    2752:	9b 81       	ldd	r25, Y+3	; 0x03
    2754:	fc 01       	movw	r30, r24
    2756:	e2 0f       	add	r30, r18
    2758:	f3 1f       	adc	r31, r19
    275a:	80 81       	ld	r24, Z
    275c:	88 23       	and	r24, r24
    275e:	39 f7       	brne	.-50     	; 0x272e <LCD_voidSendStr+0x14>
		LCD_voidSendChar(copy_u8PSTR[i]);
		i++;

	}

}
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	cf 91       	pop	r28
    2768:	df 91       	pop	r29
    276a:	08 95       	ret

0000276c <LCD_voidSendNum>:


void LCD_voidSendNum    (u32 copy_u8Num)
{
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	df 93       	push	r29
    2772:	cf 93       	push	r28
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	c8 58       	subi	r28, 0x88	; 136
    277a:	d0 40       	sbci	r29, 0x00	; 0
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	fe 01       	movw	r30, r28
    2788:	e9 57       	subi	r30, 0x79	; 121
    278a:	ff 4f       	sbci	r31, 0xFF	; 255
    278c:	91 83       	std	Z+1, r25	; 0x01
    278e:	80 83       	st	Z, r24
	u32 local_s32ArrValue[32],local_s32ArrSwap[32];
	u32 local_u32NumberOfDigits=0;
    2790:	1e 82       	std	Y+6, r1	; 0x06
    2792:	1d 82       	std	Y+5, r1	; 0x05
	u32 local_u8Counter1 =0,local_u8Counter2 =0;
    2794:	1c 82       	std	Y+4, r1	; 0x04
    2796:	1b 82       	std	Y+3, r1	; 0x03
    2798:	1a 82       	std	Y+2, r1	; 0x02
    279a:	19 82       	std	Y+1, r1	; 0x01
    279c:	35 c0       	rjmp	.+106    	; 0x2808 <LCD_voidSendNum+0x9c>
	while(copy_u8Num !=0)/*get ascii of each digit*/
	{
		local_u32NumberOfDigits ++;
    279e:	8d 81       	ldd	r24, Y+5	; 0x05
    27a0:	9e 81       	ldd	r25, Y+6	; 0x06
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	9e 83       	std	Y+6, r25	; 0x06
    27a6:	8d 83       	std	Y+5, r24	; 0x05
		local_s32ArrValue[local_u8Counter1] = (copy_u8Num % 10) + '0' ;
    27a8:	0b 81       	ldd	r16, Y+3	; 0x03
    27aa:	1c 81       	ldd	r17, Y+4	; 0x04
    27ac:	fe 01       	movw	r30, r28
    27ae:	e9 57       	subi	r30, 0x79	; 121
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	80 81       	ld	r24, Z
    27b4:	91 81       	ldd	r25, Z+1	; 0x01
    27b6:	2a e0       	ldi	r18, 0x0A	; 10
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	b9 01       	movw	r22, r18
    27bc:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    27c0:	ac 01       	movw	r20, r24
    27c2:	40 5d       	subi	r20, 0xD0	; 208
    27c4:	5f 4f       	sbci	r21, 0xFF	; 255
    27c6:	98 01       	movw	r18, r16
    27c8:	22 0f       	add	r18, r18
    27ca:	33 1f       	adc	r19, r19
    27cc:	ce 01       	movw	r24, r28
    27ce:	01 96       	adiw	r24, 0x01	; 1
    27d0:	82 0f       	add	r24, r18
    27d2:	93 1f       	adc	r25, r19
    27d4:	fc 01       	movw	r30, r24
    27d6:	36 96       	adiw	r30, 0x06	; 6
    27d8:	51 83       	std	Z+1, r21	; 0x01
    27da:	40 83       	st	Z, r20
		copy_u8Num /= 10;
    27dc:	8e 01       	movw	r16, r28
    27de:	09 57       	subi	r16, 0x79	; 121
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	fe 01       	movw	r30, r28
    27e4:	e9 57       	subi	r30, 0x79	; 121
    27e6:	ff 4f       	sbci	r31, 0xFF	; 255
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	2a e0       	ldi	r18, 0x0A	; 10
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	b9 01       	movw	r22, r18
    27f2:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    27f6:	cb 01       	movw	r24, r22
    27f8:	f8 01       	movw	r30, r16
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	80 83       	st	Z, r24
		local_u8Counter1 ++;
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 96       	adiw	r24, 0x01	; 1
    2804:	9c 83       	std	Y+4, r25	; 0x04
    2806:	8b 83       	std	Y+3, r24	; 0x03
void LCD_voidSendNum    (u32 copy_u8Num)
{
	u32 local_s32ArrValue[32],local_s32ArrSwap[32];
	u32 local_u32NumberOfDigits=0;
	u32 local_u8Counter1 =0,local_u8Counter2 =0;
	while(copy_u8Num !=0)/*get ascii of each digit*/
    2808:	fe 01       	movw	r30, r28
    280a:	e9 57       	subi	r30, 0x79	; 121
    280c:	ff 4f       	sbci	r31, 0xFF	; 255
    280e:	80 81       	ld	r24, Z
    2810:	91 81       	ldd	r25, Z+1	; 0x01
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	21 f6       	brne	.-120    	; 0x279e <LCD_voidSendNum+0x32>
    2816:	25 c0       	rjmp	.+74     	; 0x2862 <LCD_voidSendNum+0xf6>

	}
	/*revers local_s32ArrValue */
	while(local_u32NumberOfDigits >0)
	{
		local_s32ArrSwap[local_u8Counter2]= local_s32ArrValue[local_u32NumberOfDigits -1];
    2818:	69 81       	ldd	r22, Y+1	; 0x01
    281a:	7a 81       	ldd	r23, Y+2	; 0x02
    281c:	8d 81       	ldd	r24, Y+5	; 0x05
    281e:	9e 81       	ldd	r25, Y+6	; 0x06
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	9c 01       	movw	r18, r24
    2824:	22 0f       	add	r18, r18
    2826:	33 1f       	adc	r19, r19
    2828:	ce 01       	movw	r24, r28
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	82 0f       	add	r24, r18
    282e:	93 1f       	adc	r25, r19
    2830:	fc 01       	movw	r30, r24
    2832:	36 96       	adiw	r30, 0x06	; 6
    2834:	40 81       	ld	r20, Z
    2836:	51 81       	ldd	r21, Z+1	; 0x01
    2838:	9e 01       	movw	r18, r28
    283a:	29 5b       	subi	r18, 0xB9	; 185
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	cb 01       	movw	r24, r22
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	f9 01       	movw	r30, r18
    2846:	e8 0f       	add	r30, r24
    2848:	f9 1f       	adc	r31, r25
    284a:	51 83       	std	Z+1, r21	; 0x01
    284c:	40 83       	st	Z, r20
		local_u8Counter2 ++;
    284e:	89 81       	ldd	r24, Y+1	; 0x01
    2850:	9a 81       	ldd	r25, Y+2	; 0x02
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	9a 83       	std	Y+2, r25	; 0x02
    2856:	89 83       	std	Y+1, r24	; 0x01
		local_u32NumberOfDigits --;
    2858:	8d 81       	ldd	r24, Y+5	; 0x05
    285a:	9e 81       	ldd	r25, Y+6	; 0x06
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
		copy_u8Num /= 10;
		local_u8Counter1 ++;

	}
	/*revers local_s32ArrValue */
	while(local_u32NumberOfDigits >0)
    2862:	8d 81       	ldd	r24, Y+5	; 0x05
    2864:	9e 81       	ldd	r25, Y+6	; 0x06
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	b9 f6       	brne	.-82     	; 0x2818 <LCD_voidSendNum+0xac>
		local_s32ArrSwap[local_u8Counter2]= local_s32ArrValue[local_u32NumberOfDigits -1];
		local_u8Counter2 ++;
		local_u32NumberOfDigits --;
	}

	LCD_voidSendStr(local_s32ArrSwap);
    286a:	ce 01       	movw	r24, r28
    286c:	89 5b       	subi	r24, 0xB9	; 185
    286e:	9f 4f       	sbci	r25, 0xFF	; 255
    2870:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>



}
    2874:	c8 57       	subi	r28, 0x78	; 120
    2876:	df 4f       	sbci	r29, 0xFF	; 255
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	cf 91       	pop	r28
    2884:	df 91       	pop	r29
    2886:	1f 91       	pop	r17
    2888:	0f 91       	pop	r16
    288a:	08 95       	ret

0000288c <LCD_VidWriteNum>:


void LCD_VidWriteNum(u32 Copy_u8Num)
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <LCD_VidWriteNum+0x6>
    2892:	00 d0       	rcall	.+0      	; 0x2894 <LCD_VidWriteNum+0x8>
    2894:	00 d0       	rcall	.+0      	; 0x2896 <LCD_VidWriteNum+0xa>
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	9e 83       	std	Y+6, r25	; 0x06
    289c:	8d 83       	std	Y+5, r24	; 0x05
	if(Copy_u8Num <=9 &&Copy_u8Num >=0)
    289e:	8d 81       	ldd	r24, Y+5	; 0x05
    28a0:	9e 81       	ldd	r25, Y+6	; 0x06
    28a2:	8a 30       	cpi	r24, 0x0A	; 10
    28a4:	91 05       	cpc	r25, r1
    28a6:	30 f4       	brcc	.+12     	; 0x28b4 <LCD_VidWriteNum+0x28>
	{
		LCD_voidSendStr(Copy_u8Num + 48);
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	c0 96       	adiw	r24, 0x30	; 48
    28ae:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
    28b2:	5d c0       	rjmp	.+186    	; 0x296e <LCD_VidWriteNum+0xe2>
	}

	else
	{ u16 i=0;
    28b4:	1c 82       	std	Y+4, r1	; 0x04
    28b6:	1b 82       	std	Y+3, r1	; 0x03
    28b8:	0f c0       	rjmp	.+30     	; 0x28d8 <LCD_VidWriteNum+0x4c>

	  while(Copy_u8Num%10==0)
	  {
		i++;
    28ba:	8b 81       	ldd	r24, Y+3	; 0x03
    28bc:	9c 81       	ldd	r25, Y+4	; 0x04
    28be:	01 96       	adiw	r24, 0x01	; 1
    28c0:	9c 83       	std	Y+4, r25	; 0x04
    28c2:	8b 83       	std	Y+3, r24	; 0x03
		Copy_u8Num=Copy_u8Num/10;
    28c4:	8d 81       	ldd	r24, Y+5	; 0x05
    28c6:	9e 81       	ldd	r25, Y+6	; 0x06
    28c8:	2a e0       	ldi	r18, 0x0A	; 10
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	b9 01       	movw	r22, r18
    28ce:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    28d2:	cb 01       	movw	r24, r22
    28d4:	9e 83       	std	Y+6, r25	; 0x06
    28d6:	8d 83       	std	Y+5, r24	; 0x05
	}

	else
	{ u16 i=0;

	  while(Copy_u8Num%10==0)
    28d8:	8d 81       	ldd	r24, Y+5	; 0x05
    28da:	9e 81       	ldd	r25, Y+6	; 0x06
    28dc:	2a e0       	ldi	r18, 0x0A	; 10
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	b9 01       	movw	r22, r18
    28e2:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	41 f3       	breq	.-48     	; 0x28ba <LCD_VidWriteNum+0x2e>
	  {
		i++;
		Copy_u8Num=Copy_u8Num/10;
	  }

		u32 Local_u16rev=0;
    28ea:	1a 82       	std	Y+2, r1	; 0x02
    28ec:	19 82       	std	Y+1, r1	; 0x01
    28ee:	22 c0       	rjmp	.+68     	; 0x2934 <LCD_VidWriteNum+0xa8>
		while(Copy_u8Num>0)
		{
			Local_u16rev=Local_u16rev*10+Copy_u8Num %10;
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	9a 81       	ldd	r25, Y+2	; 0x02
    28f4:	9c 01       	movw	r18, r24
    28f6:	22 0f       	add	r18, r18
    28f8:	33 1f       	adc	r19, r19
    28fa:	c9 01       	movw	r24, r18
    28fc:	88 0f       	add	r24, r24
    28fe:	99 1f       	adc	r25, r25
    2900:	88 0f       	add	r24, r24
    2902:	99 1f       	adc	r25, r25
    2904:	f9 01       	movw	r30, r18
    2906:	e8 0f       	add	r30, r24
    2908:	f9 1f       	adc	r31, r25
    290a:	8d 81       	ldd	r24, Y+5	; 0x05
    290c:	9e 81       	ldd	r25, Y+6	; 0x06
    290e:	2a e0       	ldi	r18, 0x0A	; 10
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	b9 01       	movw	r22, r18
    2914:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    2918:	8e 0f       	add	r24, r30
    291a:	9f 1f       	adc	r25, r31
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
			Copy_u8Num=Copy_u8Num/10;
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	2a e0       	ldi	r18, 0x0A	; 10
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	b9 01       	movw	r22, r18
    292a:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    292e:	cb 01       	movw	r24, r22
    2930:	9e 83       	std	Y+6, r25	; 0x06
    2932:	8d 83       	std	Y+5, r24	; 0x05
		i++;
		Copy_u8Num=Copy_u8Num/10;
	  }

		u32 Local_u16rev=0;
		while(Copy_u8Num>0)
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	9e 81       	ldd	r25, Y+6	; 0x06
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	d1 f6       	brne	.-76     	; 0x28f0 <LCD_VidWriteNum+0x64>
    293c:	14 c0       	rjmp	.+40     	; 0x2966 <LCD_VidWriteNum+0xda>
			Copy_u8Num=Copy_u8Num/10;

		}
		while(Local_u16rev>0)
		{
			LCD_voidSendStr(48+(Local_u16rev % 10));
    293e:	89 81       	ldd	r24, Y+1	; 0x01
    2940:	9a 81       	ldd	r25, Y+2	; 0x02
    2942:	2a e0       	ldi	r18, 0x0A	; 10
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	b9 01       	movw	r22, r18
    2948:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    294c:	c0 96       	adiw	r24, 0x30	; 48
    294e:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
			Local_u16rev=Local_u16rev/10;
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	9a 81       	ldd	r25, Y+2	; 0x02
    2956:	2a e0       	ldi	r18, 0x0A	; 10
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	b9 01       	movw	r22, r18
    295c:	0e 94 44 17 	call	0x2e88	; 0x2e88 <__udivmodhi4>
    2960:	cb 01       	movw	r24, r22
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
		{
			Local_u16rev=Local_u16rev*10+Copy_u8Num %10;
			Copy_u8Num=Copy_u8Num/10;

		}
		while(Local_u16rev>0)
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	41 f7       	brne	.-48     	; 0x293e <LCD_VidWriteNum+0xb2>
//			i--;
//		}
//

	}
}
    296e:	26 96       	adiw	r28, 0x06	; 6
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	cf 91       	pop	r28
    297c:	df 91       	pop	r29
    297e:	08 95       	ret

00002980 <getAngle>:

u8 getPass(void);
u8 getAngle(void);

u8 getAngle(void)
{
    2980:	df 93       	push	r29
    2982:	cf 93       	push	r28
    2984:	00 d0       	rcall	.+0      	; 0x2986 <getAngle+0x6>
    2986:	0f 92       	push	r0
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
	u8 button = KPD_U8_NOT_PRESSED ,flag =0 ;
    298c:	8f ef       	ldi	r24, 0xFF	; 255
    298e:	8b 83       	std	Y+3, r24	; 0x03
    2990:	1a 82       	std	Y+2, r1	; 0x02
	u8 angle = 0;
    2992:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{

		if(button == KPD_U8_NOT_PRESSED)
    2994:	8b 81       	ldd	r24, Y+3	; 0x03
    2996:	8f 3f       	cpi	r24, 0xFF	; 255
    2998:	e9 f7       	brne	.-6      	; 0x2994 <getAngle+0x14>
		{
			KPD_u8GetSwitch(&button);
    299a:	ce 01       	movw	r24, r28
    299c:	03 96       	adiw	r24, 0x03	; 3
    299e:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
    29a2:	1f c0       	rjmp	.+62     	; 0x29e2 <getAngle+0x62>
			while((button !=KPD_U8_NOT_PRESSED))
			{
				if(button != '=')   /*to enter angle*/
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	8d 33       	cpi	r24, 0x3D	; 61
    29a8:	c9 f0       	breq	.+50     	; 0x29dc <getAngle+0x5c>
				{
				  angle = (angle*10) + button ;
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	88 2f       	mov	r24, r24
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9c 01       	movw	r18, r24
    29b2:	22 0f       	add	r18, r18
    29b4:	33 1f       	adc	r19, r19
    29b6:	c9 01       	movw	r24, r18
    29b8:	88 0f       	add	r24, r24
    29ba:	99 1f       	adc	r25, r25
    29bc:	88 0f       	add	r24, r24
    29be:	99 1f       	adc	r25, r25
    29c0:	82 0f       	add	r24, r18
    29c2:	93 1f       	adc	r25, r19
    29c4:	98 2f       	mov	r25, r24
    29c6:	8b 81       	ldd	r24, Y+3	; 0x03
    29c8:	89 0f       	add	r24, r25
    29ca:	89 83       	std	Y+1, r24	; 0x01
				  LCD_voidSendChar(button);
    29cc:	8b 81       	ldd	r24, Y+3	; 0x03
    29ce:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_voidSendChar>
				  KPD_u8GetSwitch(&button);
    29d2:	ce 01       	movw	r24, r28
    29d4:	03 96       	adiw	r24, 0x03	; 3
    29d6:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
    29da:	03 c0       	rjmp	.+6      	; 0x29e2 <getAngle+0x62>

				}
				else
				{
					flag =1;
    29dc:	81 e0       	ldi	r24, 0x01	; 1
    29de:	8a 83       	std	Y+2, r24	; 0x02
    29e0:	03 c0       	rjmp	.+6      	; 0x29e8 <getAngle+0x68>
	{

		if(button == KPD_U8_NOT_PRESSED)
		{
			KPD_u8GetSwitch(&button);
			while((button !=KPD_U8_NOT_PRESSED))
    29e2:	8b 81       	ldd	r24, Y+3	; 0x03
    29e4:	8f 3f       	cpi	r24, 0xFF	; 255
    29e6:	f1 f6       	brne	.-68     	; 0x29a4 <getAngle+0x24>
					flag =1;
					break;
				}

		     }
			if(flag)
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	88 23       	and	r24, r24
    29ec:	99 f2       	breq	.-90     	; 0x2994 <getAngle+0x14>
			{
				flag =0;
    29ee:	1a 82       	std	Y+2, r1	; 0x02
				break;
			}

	      }
	}
	return angle;
    29f0:	89 81       	ldd	r24, Y+1	; 0x01

}
    29f2:	0f 90       	pop	r0
    29f4:	0f 90       	pop	r0
    29f6:	0f 90       	pop	r0
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	08 95       	ret

000029fe <getPass>:
u8 getPass(void)
{
    29fe:	df 93       	push	r29
    2a00:	cf 93       	push	r28
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	28 97       	sbiw	r28, 0x08	; 8
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	de bf       	out	0x3e, r29	; 62
    2a0e:	0f be       	out	0x3f, r0	; 63
    2a10:	cd bf       	out	0x3d, r28	; 61
	const u8 psw[4] = {'1','2','3','4'};
	u8 button = KPD_U8_NOT_PRESSED ,flag =0 ;
    2a12:	8f ef       	ldi	r24, 0xFF	; 255
    2a14:	8c 83       	std	Y+4, r24	; 0x04
    2a16:	1b 82       	std	Y+3, r1	; 0x03
	u8 pass[4] ,i=0;
    2a18:	1a 82       	std	Y+2, r1	; 0x02
	while(1)
	{

		if(button == KPD_U8_NOT_PRESSED)
    2a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1e:	e9 f7       	brne	.-6      	; 0x2a1a <getPass+0x1c>
		{
			KPD_u8GetSwitch(&button);
    2a20:	ce 01       	movw	r24, r28
    2a22:	04 96       	adiw	r24, 0x04	; 4
    2a24:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
    2a28:	1b c0       	rjmp	.+54     	; 0x2a60 <getPass+0x62>
			while((button !=KPD_U8_NOT_PRESSED))
			{
				if(button != '=')   /*to enter password*/
    2a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a2c:	8d 33       	cpi	r24, 0x3D	; 61
    2a2e:	a9 f0       	breq	.+42     	; 0x2a5a <getPass+0x5c>
				{
				  pass[i] = button ;
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	28 2f       	mov	r18, r24
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	4c 81       	ldd	r20, Y+4	; 0x04
    2a38:	ce 01       	movw	r24, r28
    2a3a:	05 96       	adiw	r24, 0x05	; 5
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	e2 0f       	add	r30, r18
    2a40:	f3 1f       	adc	r31, r19
    2a42:	40 83       	st	Z, r20
				  LCD_voidSendChar('*');
    2a44:	8a e2       	ldi	r24, 0x2A	; 42
    2a46:	0e 94 04 11 	call	0x2208	; 0x2208 <LCD_voidSendChar>
				  KPD_u8GetSwitch(&button);
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	04 96       	adiw	r24, 0x04	; 4
    2a4e:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
				  i++;
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	8f 5f       	subi	r24, 0xFF	; 255
    2a56:	8a 83       	std	Y+2, r24	; 0x02
    2a58:	03 c0       	rjmp	.+6      	; 0x2a60 <getPass+0x62>
				}
				else
				{
					flag =1;
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	8b 83       	std	Y+3, r24	; 0x03
    2a5e:	03 c0       	rjmp	.+6      	; 0x2a66 <getPass+0x68>
	{

		if(button == KPD_U8_NOT_PRESSED)
		{
			KPD_u8GetSwitch(&button);
			while((button !=KPD_U8_NOT_PRESSED))
    2a60:	8c 81       	ldd	r24, Y+4	; 0x04
    2a62:	8f 3f       	cpi	r24, 0xFF	; 255
    2a64:	11 f7       	brne	.-60     	; 0x2a2a <getPass+0x2c>
					flag =1;
					break;
				}

		     }
			if(flag)
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	88 23       	and	r24, r24
    2a6a:	b9 f2       	breq	.-82     	; 0x2a1a <getPass+0x1c>
			}

	      }
	}

	 for(u8 i=0 ;i<4;i++)
    2a6c:	19 82       	std	Y+1, r1	; 0x01
    2a6e:	1e c0       	rjmp	.+60     	; 0x2aac <getPass+0xae>
	 {
		 if(pass[i] != psw[i])
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	28 2f       	mov	r18, r24
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	ce 01       	movw	r24, r28
    2a78:	05 96       	adiw	r24, 0x05	; 5
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	e2 0f       	add	r30, r18
    2a7e:	f3 1f       	adc	r31, r19
    2a80:	20 81       	ld	r18, Z
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	88 2f       	mov	r24, r24
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	fc 01       	movw	r30, r24
    2a8a:	e9 50       	subi	r30, 0x09	; 9
    2a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a8e:	80 81       	ld	r24, Z
    2a90:	28 17       	cp	r18, r24
    2a92:	19 f0       	breq	.+6      	; 0x2a9a <getPass+0x9c>
		 {
			 flag2 =0;
    2a94:	10 92 f6 00 	sts	0x00F6, r1
    2a98:	0c c0       	rjmp	.+24     	; 0x2ab2 <getPass+0xb4>
			 break;
		 }
		 else
		 {
			 i++;
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
    2a9c:	8f 5f       	subi	r24, 0xFF	; 255
    2a9e:	89 83       	std	Y+1, r24	; 0x01
			 flag2 =1;
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	80 93 f6 00 	sts	0x00F6, r24
			}

	      }
	}

	 for(u8 i=0 ;i<4;i++)
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
    2aa8:	8f 5f       	subi	r24, 0xFF	; 255
    2aaa:	89 83       	std	Y+1, r24	; 0x01
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	84 30       	cpi	r24, 0x04	; 4
    2ab0:	f8 f2       	brcs	.-66     	; 0x2a70 <getPass+0x72>
			 flag2 =1;
		 }

	 }

	return flag2;
    2ab2:	80 91 f6 00 	lds	r24, 0x00F6
}
    2ab6:	28 96       	adiw	r28, 0x08	; 8
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <main>:

int main(void)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	a1 97       	sbiw	r28, 0x21	; 33
    2ad2:	0f b6       	in	r0, 0x3f	; 63
    2ad4:	f8 94       	cli
    2ad6:	de bf       	out	0x3e, r29	; 62
    2ad8:	0f be       	out	0x3f, r0	; 63
    2ada:	cd bf       	out	0x3d, r28	; 61
   u8 flag3 =0 ,button = KPD_U8_NOT_PRESSED,button2 = KPD_U8_NOT_PRESSED,button3 = KPD_U8_NOT_PRESSED,ANGLE;
    2adc:	1f 8e       	std	Y+31, r1	; 0x1f
    2ade:	8f ef       	ldi	r24, 0xFF	; 255
    2ae0:	88 a3       	std	Y+32, r24	; 0x20
    2ae2:	8f ef       	ldi	r24, 0xFF	; 255
    2ae4:	89 a3       	std	Y+33, r24	; 0x21
    2ae6:	8f ef       	ldi	r24, 0xFF	; 255
    2ae8:	8e 8f       	std	Y+30, r24	; 0x1e
	DIO_voidInit();
    2aea:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_voidInit>
	LCD_voidInit();
    2aee:	0e 94 c2 0a 	call	0x1584	; 0x1584 <LCD_voidInit>
	LCD_voidSendStr("hello");
    2af2:	80 e6       	ldi	r24, 0x60	; 96
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	90 e8       	ldi	r25, 0x80	; 128
    2afe:	ab e3       	ldi	r26, 0x3B	; 59
    2b00:	b5 e4       	ldi	r27, 0x45	; 69
    2b02:	89 8f       	std	Y+25, r24	; 0x19
    2b04:	9a 8f       	std	Y+26, r25	; 0x1a
    2b06:	ab 8f       	std	Y+27, r26	; 0x1b
    2b08:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b0a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b0c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b0e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b10:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	4a ef       	ldi	r20, 0xFA	; 250
    2b18:	54 e4       	ldi	r21, 0x44	; 68
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	8d 8b       	std	Y+21, r24	; 0x15
    2b24:	9e 8b       	std	Y+22, r25	; 0x16
    2b26:	af 8b       	std	Y+23, r26	; 0x17
    2b28:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    2b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    2b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    2b30:	98 8d       	ldd	r25, Y+24	; 0x18
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e8       	ldi	r20, 0x80	; 128
    2b38:	5f e3       	ldi	r21, 0x3F	; 63
    2b3a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b3e:	88 23       	and	r24, r24
    2b40:	2c f4       	brge	.+10     	; 0x2b4c <main+0x84>
		__ticks = 1;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	9c 8b       	std	Y+20, r25	; 0x14
    2b48:	8b 8b       	std	Y+19, r24	; 0x13
    2b4a:	3f c0       	rjmp	.+126    	; 0x2bca <main+0x102>
	else if (__tmp > 65535)
    2b4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2b4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2b50:	8f 89       	ldd	r24, Y+23	; 0x17
    2b52:	98 8d       	ldd	r25, Y+24	; 0x18
    2b54:	20 e0       	ldi	r18, 0x00	; 0
    2b56:	3f ef       	ldi	r19, 0xFF	; 255
    2b58:	4f e7       	ldi	r20, 0x7F	; 127
    2b5a:	57 e4       	ldi	r21, 0x47	; 71
    2b5c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b60:	18 16       	cp	r1, r24
    2b62:	4c f5       	brge	.+82     	; 0x2bb6 <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b64:	69 8d       	ldd	r22, Y+25	; 0x19
    2b66:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	40 e2       	ldi	r20, 0x20	; 32
    2b72:	51 e4       	ldi	r21, 0x41	; 65
    2b74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b78:	dc 01       	movw	r26, r24
    2b7a:	cb 01       	movw	r24, r22
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	9c 8b       	std	Y+20, r25	; 0x14
    2b8a:	8b 8b       	std	Y+19, r24	; 0x13
    2b8c:	0f c0       	rjmp	.+30     	; 0x2bac <main+0xe4>
    2b8e:	88 ec       	ldi	r24, 0xC8	; 200
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	9a 8b       	std	Y+18, r25	; 0x12
    2b94:	89 8b       	std	Y+17, r24	; 0x11
    2b96:	89 89       	ldd	r24, Y+17	; 0x11
    2b98:	9a 89       	ldd	r25, Y+18	; 0x12
    2b9a:	01 97       	sbiw	r24, 0x01	; 1
    2b9c:	f1 f7       	brne	.-4      	; 0x2b9a <main+0xd2>
    2b9e:	9a 8b       	std	Y+18, r25	; 0x12
    2ba0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	9c 8b       	std	Y+20, r25	; 0x14
    2baa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bac:	8b 89       	ldd	r24, Y+19	; 0x13
    2bae:	9c 89       	ldd	r25, Y+20	; 0x14
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	69 f7       	brne	.-38     	; 0x2b8e <main+0xc6>
    2bb4:	14 c0       	rjmp	.+40     	; 0x2bde <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bb6:	6d 89       	ldd	r22, Y+21	; 0x15
    2bb8:	7e 89       	ldd	r23, Y+22	; 0x16
    2bba:	8f 89       	ldd	r24, Y+23	; 0x17
    2bbc:	98 8d       	ldd	r25, Y+24	; 0x18
    2bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9c 8b       	std	Y+20, r25	; 0x14
    2bc8:	8b 8b       	std	Y+19, r24	; 0x13
    2bca:	8b 89       	ldd	r24, Y+19	; 0x13
    2bcc:	9c 89       	ldd	r25, Y+20	; 0x14
    2bce:	98 8b       	std	Y+16, r25	; 0x10
    2bd0:	8f 87       	std	Y+15, r24	; 0x0f
    2bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd4:	98 89       	ldd	r25, Y+16	; 0x10
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <main+0x10e>
    2bda:	98 8b       	std	Y+16, r25	; 0x10
    2bdc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3000);

	LCD_voidClear();
    2bde:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClear>
	LCD_voidSendStr("enter password");
    2be2:	86 e6       	ldi	r24, 0x66	; 102
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
	LCD_voidGoToXY(LCD_U8_LINE2,0);
    2bea:	82 e0       	ldi	r24, 0x02	; 2
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
    flag3 = getPass();
    2bf2:	0e 94 ff 14 	call	0x29fe	; 0x29fe <getPass>
    2bf6:	8f 8f       	std	Y+31, r24	; 0x1f

	 if(flag3)
    2bf8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bfa:	88 23       	and	r24, r24
    2bfc:	d9 f0       	breq	.+54     	; 0x2c34 <main+0x16c>
	 {
		 LCD_voidClear();
    2bfe:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClear>
		 LCD_voidGoToXY(LCD_U8_LINE1,0);
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	60 e0       	ldi	r22, 0x00	; 0
    2c06:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
		 LCD_voidSendStr("1-DC motor");
    2c0a:	85 e7       	ldi	r24, 0x75	; 117
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
		 LCD_voidGoToXY(LCD_U8_LINE1,10);
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	6a e0       	ldi	r22, 0x0A	; 10
    2c16:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
		 LCD_voidSendStr("2-stepper");
    2c1a:	80 e8       	ldi	r24, 0x80	; 128
    2c1c:	90 e0       	ldi	r25, 0x00	; 0
    2c1e:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
		 LCD_voidGoToXY(LCD_U8_LINE2,0);
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
		 LCD_voidSendStr("3-servo motor");
    2c2a:	8a e8       	ldi	r24, 0x8A	; 138
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
		 flag3 = 0;
    2c32:	1f 8e       	std	Y+31, r1	; 0x1f
	 }
		while(1)
		{

			if(button == KPD_U8_NOT_PRESSED)
    2c34:	88 a1       	ldd	r24, Y+32	; 0x20
    2c36:	8f 3f       	cpi	r24, 0xFF	; 255
    2c38:	e9 f7       	brne	.-6      	; 0x2c34 <main+0x16c>
			{
				KPD_u8GetSwitch(&button);
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	80 96       	adiw	r24, 0x20	; 32
    2c3e:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
    2c42:	1d c1       	rjmp	.+570    	; 0x2e7e <main+0x3b6>
				while((button !=KPD_U8_NOT_PRESSED))
				{
					if(button == '1' )
    2c44:	88 a1       	ldd	r24, Y+32	; 0x20
    2c46:	81 33       	cpi	r24, 0x31	; 49
    2c48:	09 f0       	breq	.+2      	; 0x2c4c <main+0x184>
    2c4a:	73 c0       	rjmp	.+230    	; 0x2d32 <main+0x26a>
					{
						 LCD_voidClear();
    2c4c:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClear>
						 LCD_voidGoToXY(LCD_U8_LINE1,0);
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	60 e0       	ldi	r22, 0x00	; 0
    2c54:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
						 LCD_voidSendStr("1-CW");
    2c58:	88 e9       	ldi	r24, 0x98	; 152
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
						 LCD_voidGoToXY(LCD_U8_LINE2,0);
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	60 e0       	ldi	r22, 0x00	; 0
    2c64:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
						 LCD_voidSendStr("2-CCW");
    2c68:	8d e9       	ldi	r24, 0x9D	; 157
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
						 button = KPD_U8_NOT_PRESSED;
    2c70:	8f ef       	ldi	r24, 0xFF	; 255
    2c72:	88 a3       	std	Y+32, r24	; 0x20

                       while(1)
                       {
						if(button == KPD_U8_NOT_PRESSED)
    2c74:	88 a1       	ldd	r24, Y+32	; 0x20
    2c76:	8f 3f       	cpi	r24, 0xFF	; 255
    2c78:	09 f0       	breq	.+2      	; 0x2c7c <main+0x1b4>
    2c7a:	fd c0       	rjmp	.+506    	; 0x2e76 <main+0x3ae>
						{
			     			KPD_u8GetSwitch(&button);
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	80 96       	adiw	r24, 0x20	; 32
    2c80:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
    2c84:	51 c0       	rjmp	.+162    	; 0x2d28 <main+0x260>
							while((button !=KPD_U8_NOT_PRESSED))
							 {
								if((button == '1')||(button == '2'))
    2c86:	88 a1       	ldd	r24, Y+32	; 0x20
    2c88:	81 33       	cpi	r24, 0x31	; 49
    2c8a:	21 f0       	breq	.+8      	; 0x2c94 <main+0x1cc>
    2c8c:	88 a1       	ldd	r24, Y+32	; 0x20
    2c8e:	82 33       	cpi	r24, 0x32	; 50
    2c90:	09 f0       	breq	.+2      	; 0x2c94 <main+0x1cc>
    2c92:	46 c0       	rjmp	.+140    	; 0x2d20 <main+0x258>
								{
								 LCD_voidClear();
    2c94:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClear>
								 LCD_voidGoToXY(LCD_U8_LINE1,0);
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	60 e0       	ldi	r22, 0x00	; 0
    2c9c:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
								 LCD_voidSendStr("1-full speed");
    2ca0:	83 ea       	ldi	r24, 0xA3	; 163
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
								 LCD_voidGoToXY(LCD_U8_LINE2,0);
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	60 e0       	ldi	r22, 0x00	; 0
    2cac:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
								 LCD_voidSendStr("2-map pot");
    2cb0:	80 eb       	ldi	r24, 0xB0	; 176
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
								 button = KPD_U8_NOT_PRESSED;
    2cb8:	8f ef       	ldi	r24, 0xFF	; 255
    2cba:	88 a3       	std	Y+32, r24	; 0x20
			                       while(1)
			                       {
									if(button == KPD_U8_NOT_PRESSED)
    2cbc:	88 a1       	ldd	r24, Y+32	; 0x20
    2cbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2cc0:	e9 f7       	brne	.-6      	; 0x2cbc <main+0x1f4>
									{
						     			KPD_u8GetSwitch(&button);
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	80 96       	adiw	r24, 0x20	; 32
    2cc6:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
    2cca:	26 c0       	rjmp	.+76     	; 0x2d18 <main+0x250>
										while((button !=KPD_U8_NOT_PRESSED))
										 {
											if((button == '1')||(button == '2'))
    2ccc:	88 a1       	ldd	r24, Y+32	; 0x20
    2cce:	81 33       	cpi	r24, 0x31	; 49
    2cd0:	19 f0       	breq	.+6      	; 0x2cd8 <main+0x210>
    2cd2:	88 a1       	ldd	r24, Y+32	; 0x20
    2cd4:	82 33       	cpi	r24, 0x32	; 50
    2cd6:	e1 f4       	brne	.+56     	; 0x2d10 <main+0x248>
											{
												 LCD_voidClear();
    2cd8:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClear>
												 LCD_voidGoToXY(LCD_U8_LINE1,0);
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
												 LCD_voidSendStr("1-DC motor");
    2ce4:	85 e7       	ldi	r24, 0x75	; 117
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
												 LCD_voidGoToXY(LCD_U8_LINE1,10);
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	6a e0       	ldi	r22, 0x0A	; 10
    2cf0:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
												 LCD_voidSendStr("2-stepper motor");
    2cf4:	8a eb       	ldi	r24, 0xBA	; 186
    2cf6:	90 e0       	ldi	r25, 0x00	; 0
    2cf8:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
												 LCD_voidGoToXY(LCD_U8_LINE2,0);
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	60 e0       	ldi	r22, 0x00	; 0
    2d00:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
												 LCD_voidSendStr("3-servo motor");
    2d04:	8a e8       	ldi	r24, 0x8A	; 138
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
                                                 button = KPD_U8_NOT_PRESSED;
    2d0c:	8f ef       	ldi	r24, 0xFF	; 255
    2d0e:	88 a3       	std	Y+32, r24	; 0x20

											}

										     KPD_u8GetSwitch(&button);
    2d10:	ce 01       	movw	r24, r28
    2d12:	80 96       	adiw	r24, 0x20	; 32
    2d14:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
			                       while(1)
			                       {
									if(button == KPD_U8_NOT_PRESSED)
									{
						     			KPD_u8GetSwitch(&button);
										while((button !=KPD_U8_NOT_PRESSED))
    2d18:	88 a1       	ldd	r24, Y+32	; 0x20
    2d1a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d1c:	b9 f6       	brne	.-82     	; 0x2ccc <main+0x204>
    2d1e:	ce cf       	rjmp	.-100    	; 0x2cbc <main+0x1f4>
									 }
			                       }

								}

							     KPD_u8GetSwitch(&button2);
    2d20:	ce 01       	movw	r24, r28
    2d22:	81 96       	adiw	r24, 0x21	; 33
    2d24:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
                       while(1)
                       {
						if(button == KPD_U8_NOT_PRESSED)
						{
			     			KPD_u8GetSwitch(&button);
							while((button !=KPD_U8_NOT_PRESSED))
    2d28:	88 a1       	ldd	r24, Y+32	; 0x20
    2d2a:	8f 3f       	cpi	r24, 0xFF	; 255
    2d2c:	09 f0       	breq	.+2      	; 0x2d30 <main+0x268>
    2d2e:	ab cf       	rjmp	.-170    	; 0x2c86 <main+0x1be>
    2d30:	a2 c0       	rjmp	.+324    	; 0x2e76 <main+0x3ae>
						 }
						break;
                       }

					}
					else if(button == '3' )
    2d32:	88 a1       	ldd	r24, Y+32	; 0x20
    2d34:	83 33       	cpi	r24, 0x33	; 51
    2d36:	09 f0       	breq	.+2      	; 0x2d3a <main+0x272>
    2d38:	9e c0       	rjmp	.+316    	; 0x2e76 <main+0x3ae>
					{
						 LCD_voidClear();
    2d3a:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClear>
						 LCD_voidGoToXY(LCD_U8_LINE1,0);
    2d3e:	81 e0       	ldi	r24, 0x01	; 1
    2d40:	60 e0       	ldi	r22, 0x00	; 0
    2d42:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
						 LCD_voidSendStr("enter angle");
    2d46:	8a ec       	ldi	r24, 0xCA	; 202
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
						 LCD_voidGoToXY(LCD_U8_LINE2,0);
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	60 e0       	ldi	r22, 0x00	; 0
    2d52:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
						 ANGLE = getAngle();
    2d56:	0e 94 c0 14 	call	0x2980	; 0x2980 <getAngle>
    2d5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2d5c:	80 e0       	ldi	r24, 0x00	; 0
    2d5e:	90 e0       	ldi	r25, 0x00	; 0
    2d60:	aa e7       	ldi	r26, 0x7A	; 122
    2d62:	b4 e4       	ldi	r27, 0x44	; 68
    2d64:	8b 87       	std	Y+11, r24	; 0x0b
    2d66:	9c 87       	std	Y+12, r25	; 0x0c
    2d68:	ad 87       	std	Y+13, r26	; 0x0d
    2d6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d70:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d72:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d74:	20 e0       	ldi	r18, 0x00	; 0
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	4a ef       	ldi	r20, 0xFA	; 250
    2d7a:	54 e4       	ldi	r21, 0x44	; 68
    2d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d80:	dc 01       	movw	r26, r24
    2d82:	cb 01       	movw	r24, r22
    2d84:	8f 83       	std	Y+7, r24	; 0x07
    2d86:	98 87       	std	Y+8, r25	; 0x08
    2d88:	a9 87       	std	Y+9, r26	; 0x09
    2d8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d8c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8e:	78 85       	ldd	r23, Y+8	; 0x08
    2d90:	89 85       	ldd	r24, Y+9	; 0x09
    2d92:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d94:	20 e0       	ldi	r18, 0x00	; 0
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	40 e8       	ldi	r20, 0x80	; 128
    2d9a:	5f e3       	ldi	r21, 0x3F	; 63
    2d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2da0:	88 23       	and	r24, r24
    2da2:	2c f4       	brge	.+10     	; 0x2dae <main+0x2e6>
		__ticks = 1;
    2da4:	81 e0       	ldi	r24, 0x01	; 1
    2da6:	90 e0       	ldi	r25, 0x00	; 0
    2da8:	9e 83       	std	Y+6, r25	; 0x06
    2daa:	8d 83       	std	Y+5, r24	; 0x05
    2dac:	3f c0       	rjmp	.+126    	; 0x2e2c <main+0x364>
	else if (__tmp > 65535)
    2dae:	6f 81       	ldd	r22, Y+7	; 0x07
    2db0:	78 85       	ldd	r23, Y+8	; 0x08
    2db2:	89 85       	ldd	r24, Y+9	; 0x09
    2db4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	3f ef       	ldi	r19, 0xFF	; 255
    2dba:	4f e7       	ldi	r20, 0x7F	; 127
    2dbc:	57 e4       	ldi	r21, 0x47	; 71
    2dbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc2:	18 16       	cp	r1, r24
    2dc4:	4c f5       	brge	.+82     	; 0x2e18 <main+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dca:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dcc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dce:	20 e0       	ldi	r18, 0x00	; 0
    2dd0:	30 e0       	ldi	r19, 0x00	; 0
    2dd2:	40 e2       	ldi	r20, 0x20	; 32
    2dd4:	51 e4       	ldi	r21, 0x41	; 65
    2dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	bc 01       	movw	r22, r24
    2de0:	cd 01       	movw	r24, r26
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	0f c0       	rjmp	.+30     	; 0x2e0e <main+0x346>
    2df0:	88 ec       	ldi	r24, 0xC8	; 200
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	9c 83       	std	Y+4, r25	; 0x04
    2df6:	8b 83       	std	Y+3, r24	; 0x03
    2df8:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <main+0x334>
    2e00:	9c 83       	std	Y+4, r25	; 0x04
    2e02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e04:	8d 81       	ldd	r24, Y+5	; 0x05
    2e06:	9e 81       	ldd	r25, Y+6	; 0x06
    2e08:	01 97       	sbiw	r24, 0x01	; 1
    2e0a:	9e 83       	std	Y+6, r25	; 0x06
    2e0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	9e 81       	ldd	r25, Y+6	; 0x06
    2e12:	00 97       	sbiw	r24, 0x00	; 0
    2e14:	69 f7       	brne	.-38     	; 0x2df0 <main+0x328>
    2e16:	14 c0       	rjmp	.+40     	; 0x2e40 <main+0x378>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e18:	6f 81       	ldd	r22, Y+7	; 0x07
    2e1a:	78 85       	ldd	r23, Y+8	; 0x08
    2e1c:	89 85       	ldd	r24, Y+9	; 0x09
    2e1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	9e 83       	std	Y+6, r25	; 0x06
    2e2a:	8d 83       	std	Y+5, r24	; 0x05
    2e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e30:	9a 83       	std	Y+2, r25	; 0x02
    2e32:	89 83       	std	Y+1, r24	; 0x01
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	9a 81       	ldd	r25, Y+2	; 0x02
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	f1 f7       	brne	.-4      	; 0x2e38 <main+0x370>
    2e3c:	9a 83       	std	Y+2, r25	; 0x02
    2e3e:	89 83       	std	Y+1, r24	; 0x01
//						 LCD_voidSendStr("1-CW");
//						 LCD_voidGoToXY(LCD_U8_LINE2,0);
//						 LCD_voidSendStr("2-CCW");
						 _delay_ms(1000);
						// KPD_u8GetSwitch(&button);
						 LCD_voidClear();
    2e40:	0e 94 2e 13 	call	0x265c	; 0x265c <LCD_voidClear>
						 LCD_voidGoToXY(LCD_U8_LINE1,0);
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
						 LCD_voidSendStr("1-DC motor");
    2e4c:	85 e7       	ldi	r24, 0x75	; 117
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
						 LCD_voidGoToXY(LCD_U8_LINE1,10);
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	6a e0       	ldi	r22, 0x0A	; 10
    2e58:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
						 LCD_voidSendStr("2-stepper motor");
    2e5c:	8a eb       	ldi	r24, 0xBA	; 186
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
						 LCD_voidGoToXY(LCD_U8_LINE2,0);
    2e64:	82 e0       	ldi	r24, 0x02	; 2
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	0e 94 06 13 	call	0x260c	; 0x260c <LCD_voidGoToXY>
						 LCD_voidSendStr("3-servo motor");
    2e6c:	8a e8       	ldi	r24, 0x8A	; 138
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 8d 13 	call	0x271a	; 0x271a <LCD_voidSendStr>
						 button =0 ;
    2e74:	18 a2       	std	Y+32, r1	; 0x20
//						 LCD_voidClear();
//						 LCD_voidGoToXY(LCD_U8_LINE1,0);
//						 LCD_voidSendStr("logged off ");
//						 button =0 ;
//					}
					KPD_u8GetSwitch(&button);
    2e76:	ce 01       	movw	r24, r28
    2e78:	80 96       	adiw	r24, 0x20	; 32
    2e7a:	0e 94 35 0a 	call	0x146a	; 0x146a <KPD_u8GetSwitch>
		{

			if(button == KPD_U8_NOT_PRESSED)
			{
				KPD_u8GetSwitch(&button);
				while((button !=KPD_U8_NOT_PRESSED))
    2e7e:	88 a1       	ldd	r24, Y+32	; 0x20
    2e80:	8f 3f       	cpi	r24, 0xFF	; 255
    2e82:	09 f0       	breq	.+2      	; 0x2e86 <main+0x3be>
    2e84:	df ce       	rjmp	.-578    	; 0x2c44 <main+0x17c>
    2e86:	d6 ce       	rjmp	.-596    	; 0x2c34 <main+0x16c>

00002e88 <__udivmodhi4>:
    2e88:	aa 1b       	sub	r26, r26
    2e8a:	bb 1b       	sub	r27, r27
    2e8c:	51 e1       	ldi	r21, 0x11	; 17
    2e8e:	07 c0       	rjmp	.+14     	; 0x2e9e <__udivmodhi4_ep>

00002e90 <__udivmodhi4_loop>:
    2e90:	aa 1f       	adc	r26, r26
    2e92:	bb 1f       	adc	r27, r27
    2e94:	a6 17       	cp	r26, r22
    2e96:	b7 07       	cpc	r27, r23
    2e98:	10 f0       	brcs	.+4      	; 0x2e9e <__udivmodhi4_ep>
    2e9a:	a6 1b       	sub	r26, r22
    2e9c:	b7 0b       	sbc	r27, r23

00002e9e <__udivmodhi4_ep>:
    2e9e:	88 1f       	adc	r24, r24
    2ea0:	99 1f       	adc	r25, r25
    2ea2:	5a 95       	dec	r21
    2ea4:	a9 f7       	brne	.-22     	; 0x2e90 <__udivmodhi4_loop>
    2ea6:	80 95       	com	r24
    2ea8:	90 95       	com	r25
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	08 95       	ret

00002eb0 <__prologue_saves__>:
    2eb0:	2f 92       	push	r2
    2eb2:	3f 92       	push	r3
    2eb4:	4f 92       	push	r4
    2eb6:	5f 92       	push	r5
    2eb8:	6f 92       	push	r6
    2eba:	7f 92       	push	r7
    2ebc:	8f 92       	push	r8
    2ebe:	9f 92       	push	r9
    2ec0:	af 92       	push	r10
    2ec2:	bf 92       	push	r11
    2ec4:	cf 92       	push	r12
    2ec6:	df 92       	push	r13
    2ec8:	ef 92       	push	r14
    2eca:	ff 92       	push	r15
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	ca 1b       	sub	r28, r26
    2eda:	db 0b       	sbc	r29, r27
    2edc:	0f b6       	in	r0, 0x3f	; 63
    2ede:	f8 94       	cli
    2ee0:	de bf       	out	0x3e, r29	; 62
    2ee2:	0f be       	out	0x3f, r0	; 63
    2ee4:	cd bf       	out	0x3d, r28	; 61
    2ee6:	09 94       	ijmp

00002ee8 <__epilogue_restores__>:
    2ee8:	2a 88       	ldd	r2, Y+18	; 0x12
    2eea:	39 88       	ldd	r3, Y+17	; 0x11
    2eec:	48 88       	ldd	r4, Y+16	; 0x10
    2eee:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ef0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ef2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ef4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ef6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ef8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2efa:	b9 84       	ldd	r11, Y+9	; 0x09
    2efc:	c8 84       	ldd	r12, Y+8	; 0x08
    2efe:	df 80       	ldd	r13, Y+7	; 0x07
    2f00:	ee 80       	ldd	r14, Y+6	; 0x06
    2f02:	fd 80       	ldd	r15, Y+5	; 0x05
    2f04:	0c 81       	ldd	r16, Y+4	; 0x04
    2f06:	1b 81       	ldd	r17, Y+3	; 0x03
    2f08:	aa 81       	ldd	r26, Y+2	; 0x02
    2f0a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f0c:	ce 0f       	add	r28, r30
    2f0e:	d1 1d       	adc	r29, r1
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	de bf       	out	0x3e, r29	; 62
    2f16:	0f be       	out	0x3f, r0	; 63
    2f18:	cd bf       	out	0x3d, r28	; 61
    2f1a:	ed 01       	movw	r28, r26
    2f1c:	08 95       	ret

00002f1e <_exit>:
    2f1e:	f8 94       	cli

00002f20 <__stop_program>:
    2f20:	ff cf       	rjmp	.-2      	; 0x2f20 <__stop_program>
